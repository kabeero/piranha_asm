;-------------------------------------------------------------------------------
;
; trajectory-nonlinear-cds.npasm
;
;-------------------------------------------------------------------------------

; Define new instruction labels to make the code intuitive to read.

#define PXL_ROW_MASK    00111000b   ; The row bits for pixels
#define PXL_COL_MASK    00000111b   ; The column bits for pixels

#define PXL_EDGE_N      00000000b   ; Matches pixels on N edge of NP
#define PXL_EDGE_S      00111000b   ; Matches pixels on S edge of NP
#define PXL_EDGE_W      00000000b   ; Matches pixels on W edge of NP
#define PXL_EDGE_E      00000111b   ; Matches pixels on E edge of NP
 
#define START_OF_X      00000000b   ; Starting address of X RAM.
#define START_OF_Y      01000000b   ; Starting address of Y RAM.
#define START_OF_Z      10000000b   ; Starting address of Z RAM.
#define START_OF_V      11000000b   ; Starting address of V RAM.
 
#define NUM_PIXELS      64          ; The number of pixels in the NP.
#define MASK_AF         01000000b   ; Mask for ADC active flag
#define MASK_NF         00000100b   ; Mask for negative flag

; Algorithm constants.

#define THRESHOLD       16          ; Min frame diff. before detection

; Algorithm variables.
 
#define index           r0          ; The current pixel index 0..63
#define pxlr            r2          ; The current pixel row 0..7
#define pxlc            r3          ; The current pixel column 0..7
                           
#define NULL_BB         0           ; Indicates no bounding box found

#define xmin            z[0]        ; Motion bounding box NW corner x
#define ymin            z[1]        ; Motion bounding box NW corner y
#define xmax            z[2]        ; Motion bounding box SE corner x
#define ymax            z[3]        ; Motion bounding box SE corner y
             
#define xmin_in         z[4]        ; Motion bounding box NW corner x
#define ymin_in         z[5]        ; Motion bounding box NW corner y
#define xmax_in         z[6]        ; Motion bounding box SE corner x
#define ymax_in         z[7]        ; Motion bounding box SE corner y

#define coord_pointer   v0          ; Address to save coordinate pairs

; for the non-linear prediction algorithm... this should help

#define   x_s       01000000b   ; Y[0]
#define   y_s       01000001b   ; Y[1]
#define  dx_s       01000010b   ; Y[2]
#define  dy_s       01000011b   ; Y[3]
#define sdx_s       01000100b   ; Y[4]
#define sdy_s       01000101b   ; Y[5]

#define   x_o       10001000b   ; Z[8]
#define   y_o       10001001b   ; Z[9]
#define  dx_o       10001010b   ; Z[10]
#define  dy_o       10001011b   ; Z[11]
#define sdx_o       10001100b   ; Z[12]
#define sdy_o       10001101b   ; Z[13]

#define    x_i      00000000b   ; X[0]
#define    y_i      00000001b   ; X[1]
#define   dx_i      00000010b   ; X[2]
#define   dy_i      00000011b   ; X[3]
#define  sdx_i      00000100b   ; X[4]
#define  sdy_i      00000101b   ; X[5]
#define  ddx_i      00000110b   ; X[6]
#define  ddy_i      00000111b   ; X[7]
#define    xp0      00001000b   ; X[8]
#define    yp0      00001001b   ; X[9]
#define    xp1      00001010b   ; X[10]
#define    yp1      00001011b   ; X[11]
#define    xp2      00001100b   ; X[12]
#define    yp2      00001101b   ; X[13]
             
;-------------------------------------------------------------------------------
      
; Zeroes all of Z memory where the data is stored.  This isn't required,
; but it makes the output easier to debug.
         
; CLEAR_HIST:
; 
; CLEAR_HIST_INIT:
; 
;     LDR     r0, START_OF_Z
;     LDR     r1, 0
; 
; CLEAR_HIST_LOOP:
; 
;     STR     r1, [r0]
;     ADD     r0, 1
;     CMP     r0, {START_OF_Z + NUM_PIXELS}
;     BLO     CLEAR_HIST_LOOP

;-------------------------------------------------------------------------------
 
START:
     
; Set the image memory to a consistent value to make it clearer when pixels are 
; not triggering properly.
                                          
CLEAN_SLATE_INIT:
 
    LDR     r0, START_OF_X  ; Overwrite x ram with constant (note this is in gray code)
    LDR     r2, 00h      
    LDR     r1, r0          ; Calculate the final address
    ADD     r1, NUM_PIXELS 

CLEAN_SLATE_LOOP:

    STR     r2, [r0]
    ADD     r0, 1
    CMP     r0, r1
    BLO     CLEAN_SLATE_LOOP
 
ACQUIRE_IMAGE_RESET:

    IMG                     ; Acquire a new image from the ADCs with 0 t_int

WAIT_FOR_ADC_RESET:

    LDR     r0, SR             ; Load the status register
    AND     r0, MASK_AF        ; Check if the ADC is active
    BNZ     WAIT_FOR_ADC_RESET ; Loop while the ADC is converting

MOVE_TO_Z_INIT:
	
    LDR     r1, START_OF_X
    LDR     r2, START_OF_Z

MOVE_TO_Z:

    LDR     r0, [r1]
    GTB     r0
    STR     r0, [r2]
    ADD     r1, 1
    ADD     r2, 1
    CMP     r1, NUM_PIXELS
    BNE     MOVE_TO_Z

ACQUIRE_IMAGE:

    IMG                     ; Acquire a new image from the ADCs

WAIT_FOR_ADC:

    ; At this point, the FSM for the ADC is running.  Read the status register
    ; to check if the conversion is finished. (Note: very inefficient)

    LDR     r0, SR          ; Load the status register
    AND     r0, MASK_AF     ; Check if the ADC is active
    BNZ     WAIT_FOR_ADC    ; Loop while the ADC is converting
     
DIFFERENCE_INIT:
    
    LDR     r1, START_OF_X
    LDR     r2, START_OF_Z

DIFFERENCE:

    LDR     r0, [r1]
    GTB     r0
    CMP     r0, [r2]        ; Check to make sure that after differencing, we don't go negative
    ZHI
       LDR  r0, [r2]
    WAK
    SUB     r0, [r2]
    STR     r0, [r1]        ; Store difference in X
    ADD     r1, 1
    ADD     r2, 1
    CMP     r1, NUM_PIXELS
    BNE     DIFFERENCE 

RECOVER_POINTS:
    
    LDR     r0, RCR
    CMP     r0, 00h                     ; Check if this is the origin NP
    ZNE                                 ; Sleep all other NPs at this point.
    
    ; copy Y->Z ('s'aved to 'o'ld, clear Y)
    
    RECOVER_INIT:
            LDR    r1, START_OF_Y
            LDR    r2, {START_OF_Z + 8}

    RECOVER_LOOP:
            LDR    r0, [r1]
            STR    r0, [r2]
            LDR    r0, 0
            STR    r0, [r1]
            ADD    r1, 1
            ADD    r2, 1
            CMP    r1, {START_OF_Y + 5} ; recovers 6 data points
            BNE    RECOVER_LOOP
    WAK
     
CONVERT_TO_SIGNED:

CONVERT_TO_SIGNED_INIT:

    LDR     r0, START_OF_X

CONVERT_TO_SIGNED_LOOP:

    LDR     r1, [r0]
    LSR     r1          ; Max value is +127 now
    STR     r1, [r0]
    ADD     r0, 1
    CMP     r0, NUM_PIXELS
    BLO     CONVERT_TO_SIGNED_LOOP
 
;-------------------------------------------------------------------------------
 
; Iterate through every pixel in the new image (in X) and subtract the old, 
; previous image (in Y).  The math here is signed since differences can be 
; positive or negative.  Because of this, images are always divided by a factor 
; of two in order to prevent overflow during math operations.  The previous 
; frame is stored in this signed representation as well.
 
FRAME_DIFFERENCE:

FD_LOOP_INIT:
 
    ; Store bounding box coordinates for this NP in V memory.

    LDR r0, 0           ; Clear coordinates, 0 is reserved for NULL
    STR r0, xmin
    STR r0, ymin
    STR r0, xmax
    STR r0, ymax
                                         
    LDR index, START_OF_X      ; Initialize index variables
                          
FD_LOOP:

    LDR     pxlc, index         ; Update row/column variables
    AND     pxlc, PXL_COL_MASK
    ADD     pxlc, 1             ; C/R numbered from 1-8 since 0 is NULL
    LDR     pxlr, index
    LSR     pxlr
    LSR     pxlr
    LSR     pxlr
    ADD     pxlr, 1             ; C/R numbered from 1-8 since 0 is NULL

    LDR     r1, [r0]        ; Load the new pixel value
    ADD     r0, START_OF_Y  ; Find correspond Y pixel
    SUB     r1, [r0]        ; signed(new) - signed(old)
    ZPL                     ; If negative, negate to find absolute value
        EOR     r1, FFh     ; For two's compliment, xor(x, FFh)+1 = -x
        ADD     r1, 1
    WAK
    CMP     r1, THRESHOLD   ; Binarize image based on threshold
    ZLO
        LDR     r1, 255     ; This makes it easier to debug, but is not req'd
        STR     r1, [r0]
        LDR     r1, xmin    ; Check if x/y min/max variables are NULL
        CMP     r1, 0    
        ZNE                         ; NPs where this is the 1st detection, so
            STR     pxlc, xmin      ;   this pixel is the min and max
            STR     pxlr, ymin
            STR     pxlc, xmax
            STR     pxlr, ymax
        WAK
        ZEQ                         ; Execute if current values are valid
            CMP     pxlc, xmin      ; Is this the min x encountered?
            ZGE
                STR     pxlc, xmin
            WAK
            CMP     pxlr, ymin      ; Is this the min y encountered?
            ZGE
                STR     pxlr, ymin
            WAK
            CMP     pxlc, xmax      ; Is this the max x encountered?
            ZLE
                STR     pxlc, xmax
            WAK
            CMP     pxlr, ymax      ; Is this the max y encountered?
            ZLE
                STR     pxlr, ymax
            WAK
        WAK
    WAK

FD_LOOP_UPDATE:

    ADD     r0, {1 - START_OF_Y}  ; Return to the next pixel in X RAM
    CMP     r0, NUM_PIXELS
    BLT     FD_LOOP
                         
;-------------------------------------------------------------------------------

COMBINE_BOUNDING_BOXES:
     
CBB_ROW:

CBB_ROW_INIT:

    LDR     r3, 7       ; Number of shifts to perform, #ROWS-1

CBB_ROW_LOOP:

    ; When combining bounding boxes, several cases may occur:
    ;
    ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
    ;       this case, the coordinate pairs should remain NULL
    ;
    ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
    ;       case, the incoming coordinate pairs should overwrite the local ones.
    ;
    ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
    ;       the coordinate pairs should not be modified.
    ;
    ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
    ;       coordinate pair must be compared and the more inclusive one saved.
    ;
    ; NOTE: When an NP is asleep, it will not write any data to memory or 
    ;       registers, so any data that needs to be access from a sleeping
    ;       NP through the NSWE data bus must already be loaded in r0..r3.

    ; Copy incoming coordinates locally to prevent NPs from receiving 
    ; out-of-sync data.

    LDR     r0, xmin
    LDR     r0, S
    STR     r0, xmin_in

    LDR     r0, ymin
    LDR     r0, S
    STR     r0, ymin_in

    LDR     r0, xmax
    LDR     r0, S
    STR     r0, xmax_in

    LDR     r0, ymax
    LDR     r0, S
    STR     r0, ymax_in

    ; First check if the incoming BB coords are NULL.  If so, the NP will should
    ; disregard any incoming coordinates, since they are uninitialized.  It goes
    ; to sleep for this loop cycle.
      
    LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
    CMP     r0, NULL_BB
    ZEQ
 
        ; If this NP already found motion pixels itself, it needs to compare 
        ; the coords of its own internal bounding box to those it receives to
        ; create a new BB that encloses both BBs.

        LDR     r0, xmin
        CMP     r0, NULL_BB
        ZEQ
            ; xmin

            LDR     r0, xmin_in
            CMP     r0, xmin        ; Compare it to this NP's value
            ZHS
                STR     r0, xmin    ; If lower, save it as the new minimum
            WAK

            ; ymin

            LDR     r0, ymin_in
            ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
            CMP     r0, ymin        ; Compare it to this NP's value
            ZHS
                STR     r0, ymin    ; If lower, save it as the new minimum
            WAK
                  
            ; xmax

            LDR     r0, xmax_in
            CMP     r0, xmax        ; Compare it to this NP's value
            ZLS
                STR     r0, xmax    ; If higher, save it as the new maximum
            WAK

            ; ymin
             
            LDR     r0, ymax_in
            ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
            CMP     r0, ymax        ; Compare it to this NP's value
            ZLS
                STR     r0, ymax    ; If higher, save it as the new maximum
            WAK
        WAK  

        ; Next check if this NP found any motion pixels in itself.  If not, all 
        ; of its x/y min/max entires will be NULL/0 and it can assume the 
        ; incoming bounding box will enclose its own, as it has none.  So, all
        ; incoming values are accepted without comparison.
        ;
        ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
        ;       valid for them even though the code above does modify some NPs.

        LDR     r0, xmin
        CMP     r0, NULL_BB
        ZNE                     ; If NULL, use incoming coordinates always
            LDR     r0, xmin_in
            STR     r0, xmin
            LDR     r0, ymin_in
            ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
            STR     r0, ymin
            LDR     r0, xmax_in
            STR     r0, xmax
            LDR     r0, ymax_in
            ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
            STR     r0, ymax
        WAK
    WAK

CBB_ROW_LOOP_CONDITION:

    SUB     r3, 1               ; Indicate an additional shift is complete
    BNZ     CBB_ROW_LOOP

;-------------------------------------------------------------------------------
      
CBB_COL:

CBB_COL_INIT:

    LDR     r3, 9       ; Number of shifts to perform, #COLS-1

CBB_COL_LOOP:

    ; When combining bounding boxes, several cases may occur:
    ;
    ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
    ;       this case, the coordinate pairs should remain NULL
    ;
    ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
    ;       case, the incoming coordinate pairs should overwrite the local ones.
    ;
    ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
    ;       the coordinate pairs should not be modified.
    ;
    ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
    ;       coordinate pair must be compared and the more inclusive one saved.
    ;
    ; NOTE: When an NP is asleep, it will not write any data to memory or 
    ;       registers, so any data that needs to be access from a sleeping
    ;       NP through the NSWE data bus must already be loaded in r0..r3.

    ; Copy incoming coordinates locally to prevent NPs from receiving 
    ; out-of-sync data.

    LDR     r0, xmin
    LDR     r0, E
    STR     r0, xmin_in

    LDR     r0, ymin
    LDR     r0, E
    STR     r0, ymin_in

    LDR     r0, xmax
    LDR     r0, E
    STR     r0, xmax_in

    LDR     r0, ymax
    LDR     r0, E
    STR     r0, ymax_in

    ; First check if the incoming BB coords are NULL.  If so, the NP will should
    ; disregard any incoming coordinates, since they are uninitialized.  It goes
    ; to sleep for this loop cycle.
      
    LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
    CMP     r0, NULL_BB
    ZEQ
 
        ; If this NP already found motion pixels itself, it needs to compare 
        ; the coords of its own internal bounding box to those it receives to
        ; create a new BB that encloses both BBs.

        LDR     r0, xmin
        CMP     r0, NULL_BB
        ZEQ
            ; xmin

            LDR     r0, xmin_in
            ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
            CMP     r0, xmin        ; Compare it to this NP's value
            ZHS
                STR     r0, xmin    ; If lower, save it as the new minimum
            WAK

            ; ymin

            LDR     r0, ymin_in
            CMP     r0, ymin        ; Compare it to this NP's value
            ZHS
                STR     r0, ymin    ; If lower, save it as the new minimum
            WAK
                  
            ; xmax

            LDR     r0, xmax_in
            ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
            CMP     r0, xmax        ; Compare it to this NP's value
            ZLS
                STR     r0, xmax    ; If higher, save it as the new maximum
            WAK

            ; ymin
             
            LDR     r0, ymax_in
            CMP     r0, ymax        ; Compare it to this NP's value
            ZLS
                STR     r0, ymax    ; If higher, save it as the new maximum
            WAK
        WAK  

        ; Next check if this NP found any motion pixels in itself.  If not, all 
        ; of its x/y min/max entires will be NULL/0 and it can assume the 
        ; incoming bounding box will enclose its own, as it has none.  So, all
        ; incoming values are accepted without comparison.
        ;
        ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
        ;       valid for them even though the code above does modify some NPs.

        LDR     r0, xmin
        CMP     r0, NULL_BB
        ZNE                     ; If NULL, use incoming coordinates always
            LDR     r0, xmin_in
            ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
            STR     r0, xmin
            LDR     r0, ymin_in
            STR     r0, ymin
            LDR     r0, xmax_in
            ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
            STR     r0, xmax
            LDR     r0, ymax_in
            STR     r0, ymax
        WAK
    WAK

CBB_COL_LOOP_CONDITION:

    SUB     r3, 1               ; Indicate an additional shift is complete
    BNZ     CBB_COL_LOOP
         
;-------------------------------------------------------------------------------

; before we embed center_bb and next_x,y into X memory, lets make a copy in Y

COPY_IMAGE:

COPY_IMAGE_INIT:

    LDR     r0, START_OF_X
    LDR     r1, START_OF_Y

COPY_IMAGE_LOOP:

    LDR     r2, [r0]
    STR     r2, [r1]
    ADD     r0, 1
    ADD     r1, 1
    CMP     r0, NUM_PIXELS
    BLO     COPY_IMAGE_LOOP

CONVERT_TO_UNSIGNED:

CONVERT_TO_UNSIGNED_INIT:

    LDR     r0, START_OF_X

CONVERT_TO_UNSIGNED_LOOP:

    LDR     r1, [r0]
    LSL     r1          ; Max value is +255 now
    STR     r1, [r0]
    ADD     r0, 1
    CMP     r0, NUM_PIXELS
    BLO     CONVERT_TO_UNSIGNED_LOOP
 
;-------------------------------------------------------------------------------

FIND_BB_CENTER:

    ; At this point, the (0,0) NP has collected and compared all of the 
    ; individual NP bounding boxes and found the smallest bounding box that 
    ; enclosed all of them.  The tracking algorithm assumes the target is at the
    ; center of this bounding box, which encloses all motion in the frame.  The 
    ; algorithm finds the center of this box, which roughly corresponds to the 
    ; location of the tracked object.  In reality, it lags behind the actual
    ; object location since it is actually tracking motion deltas between 
    ; frames.

    LDR     r0, RCR
    CMP     r0, 00h         ; Check if this is the origin NP
    ZNE                     ; Sleep all other NPs at this point.

        LDR     r0, xmin    ; Find the center x coordinate
        ADD     r0, xmax
        LSR     r0
        LDR     r1, x_i
        STR     r0, [r1]
        LDR     r0, ymin    ; Find the center y coordinate
        ADD     r0, ymax
        LSR     r0
        LDR     r1, y_i
        STR     r0, [r1]

        ;-------------------------------------------------------------------------------
        ; non-linear algorithm:
        ;-------------------------------------------------------------------------------

        LDR     r0, x_o
        CMP     r0, NULL_BB
        ZNE                     ; If NULL, store these as last coordinates seen
                LDR    r1, x_i
                LDR    r0, [r1]
                LDR    r1, x_o
                STR    r0, [r1] ; store the x_last
                LDR    r1, y_i
                LDR    r0, [r1]
                LDR    r1, y_o
                STR    r0, [r1] ; store the y_last
        WAK

        ;-------------------------------------------------------------------------------
        ;   there are 6 possible scenarios:
        ;-------------------------------------------------------------------------------
        ; X direction:                              Y direction:
        ;  --> to ------> : acceleration            |    |    |      |    |      ^
        ;  ------> to --> : deceleration            | to V    V  to  |    |  to  |
        ;  ----> to <---- : inflection              V                V    V      |
        ; 
        ;  <-- to <------ : acceleration            ^    ^    ^      ^    ^      |
        ;  <------ to <-- : deceleration            | to |    |  to  |    |  to  |
        ;  <---- to ----> : inflection              |                |    |      V
        ;-------------------------------------------------------------------------------
   
   ; FOR DEBUG 
   ; WAK
   ; B OUTPUT_ORIGINAL_IMAGE
        
        NONLINEAR_LOOP_INIT:

               ; we will use a giant loop to do all 6 cases for both X and Y
               ; there will be a lot of dynamic addressing ...
               ;
               ; for reference:
               ;       x_i      00000000b   ; X[0]
               ;       y_i      00000001b   ; X[1]
               ;      dx_i      00000010b   ; X[2]
               ;      dy_i      00000011b   ; X[3]
               ;     sdx_i      00000100b   ; X[4]
               ;     sdy_i      00000101b   ; X[5]
               ;     ddx_i      00000110b   ; X[6]
               ;     ddy_i      00000111b   ; X[7]
               ;       xp0      00001000b   ; X[8]
               ;       yp0      00001001b   ; X[9]
               ;       xp1      00001010b   ; X[10]
               ;       yp1      00001011b   ; X[11]
               ;       xp2      00001100b   ; X[12]
               ;       yp2      00001101b   ; X[13]
               ;
               ;       x_o      10001000b   ; Z[8]
               ;       y_o      10001001b   ; Z[9]
               ;      dx_o      10001010b   ; Z[10]
               ;      dy_o      10001011b   ; Z[11]
               ;     sdx_o      10001100b   ; Z[12]
               ;     sdy_o      10001101b   ; Z[13]
               ;
               
               LDR    r1, y_i
               LDR    r2, dy_i
               LDR    r3, yp0
               LDR    r0, 0
               STR    r0, [r3] ; this will placehold our loop var
               LDR    r3, y_o

        NONLINEAR_LOOP:

               LDR    r0, [r1] ; r0 <= position
               ADD    r1, 2    ; r1: velocity
               CMP    r0, [r3] ; position vs old_position
               ZLO
                      ; slope is positive
                      SUB    r0, [r3] ; r0 <= velocity
                      STR    r0, [r2] ; r2 <= velocity
                      ADD    r2, 2    ; r2: sign
                      LDR    r0, 1
                      STR    r0, [r2] ; r2 <= positive v
                      SUB    r2, 2    ; r2: velocity

                      ; check previous slope
                      ADD    r3, 4    ; r3: sign of vel_o
                      LDR    r0, [r3] ; r0 <= sdx,y
                      SUB    r3, 4    ; r3: old position
                      CMP    r0, 1    ; sdx,y vs 1
                      ZNE                    ; old velocity is positive
                             ADD    r3, 2    ; r3: old velocity
                             LDR    r0, [r3] ; r0 <= vel_o
                             SUB    r3, 2    ; r3: old position
                             CMP    r0, [r2] ; d_o vs d
                             ZLO                     ; d_o > d => DD IS NEGATIVE
                                    SUB    r0, [r2]  ; r0 <= d_o - d
                                    ADD    r1, 4     ; r1: ddx,y
                                    STR    r0, [r1]  ; r1 <= ddx,y
                                    SUB    r1, 6     ; r1: position

                                    LDR    r0, [r1]  ; r0 <= position
                                    ADD    r1, 2     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    SUB    r0, [r1]  ; r0 -= acceleration
                                    ADD    r1, 2     ; r1: predicted0
                                    STR    r0, [r1]  ; r1 <= predicted0

                                    SUB    r1, 6     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    SUB    r0, [r1]  ; r0 -= acceleration 
                                    ADD    r1, 4     ; r1: predicted1
                                    STR    r0, [r1]  ; r1 <= predicted1

                                    SUB    r1, 8     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    SUB    r0, [r1]  ; r0 -= acceleration 
                                    ADD    r1, 6     ; r1: predicted2
                                    STR    r0, [r1]  ; r1 <= predicted2
                                    
                                    SUB    r1, 10    ; r1: velocity
                              WAK
                              LDR   r0, [r1] ; r0 <= velocity
                              ADD   r3, 2    ; r3: old velocity
                              CMP   r0, [r3] ; velocity vs velocity_o
                              ZLO                    ; d > d_o => DD IS POSITIVE
                                    SUB    r0, [r3]  ; r0 <= d - d_o
                                    ADD    r1, 4     ; r1: ddx,y
                                    STR    r0, [r1]  ; r1 <= ddx,y
                                    SUB    r1, 6     ; r1: position

                                    LDR    r0, [r1]  ; r0 <= position
                                    ADD    r1, 2     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    ADD    r0, [r1]  ; r0 += acceleration
                                    ADD    r1, 2     ; r1: predicted0
                                    STR    r0, [r1]  ; r1 <= predicted0

                                    SUB    r1, 6     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    ADD    r0, [r1]  ; r0 += acceleration 
                                    ADD    r1, 4     ; r1: predicted1
                                    STR    r0, [r1]  ; r1 <= predicted1

                                    SUB    r1, 8     ; r1: velocity
                                    ADD    r0, [r1]  ; r0 += velocity
                                    ADD    r1, 4     ; r1: acceleration
                                    ADD    r0, [r1]  ; r0 + acceleration 
                                    ADD    r1, 6     ; r1: predicted2
                                    STR    r0, [r1]  ; r1 <= predicted2
                                    
                                    SUB    r1, 10    ; r1: velocity
                             WAK
                             SUB    r3, 2  ; r3: old position
                      WAK
                      
                      ; check previous slope
                      ADD    r3, 4    ; r3: sign of vel_o
                      LDR    r0, [r3] ; r0 <= sdx,y
                      SUB    r3, 4    ; r3: old position
                      CMP    r0, 1    ; sdx,y vs 1
                      ZEQ                    ; old velocity is negative
                                             ; velocity went from negative to positive, accel is positive
                             ADD    r3, 2    ; r3: old velocity
                             LDR    r0, [r3] ; r0 <= vel_o
                             SUB    r3, 2    ; r3: old position
                             ADD    r0, [r1] ; r0 += vel_o + vel

                             ADD    r1, 4     ; r1: ddx,y
                             STR    r0, [r1]  ; r1 <= ddx,y
                             SUB    r1, 6     ; r1: position

                             LDR    r0, [r1]  ; r0 <= position
                             ADD    r1, 2     ; r1: velocity
                             ADD    r0, [r1]  ; r0 += velocity
                             ADD    r1, 4     ; r1: acceleration
                             ADD    r0, [r1]  ; r0 += acceleration
                             ADD    r1, 2     ; r1: predicted0
                             STR    r0, [r1]  ; r1 <= predicted0

                             SUB    r1, 6     ; r1: velocity
                             ADD    r0, [r1]  ; r0 += velocity
                             ADD    r1, 4     ; r1: acceleration
                             ADD    r0, [r1]  ; r0 += acceleration 
                             ADD    r1, 4     ; r1: predicted1
                             STR    r0, [r1]  ; r1 <= predicted1

                             SUB    r1, 8     ; r1: velocity
                             ADD    r0, [r1]  ; r0 += velocity
                             ADD    r1, 4     ; r1: acceleration
                             ADD    r0, [r1]  ; r0 + acceleration 
                             ADD    r1, 6     ; r1: predicted2
                             STR    r0, [r1]  ; r1 <= predicted2
                             
                             SUB    r1, 10    ; r1: velocity
                      WAK
               WAK

               ; we only have room for half the code ...

               ; how is this breaking everything?
               
               ; LDR    r2, yp0
               ; LDR    r0, [r2]
               ; LDR    r1, y_i
               ; LDR    r2, dy_i
               ; LDR    r3, y_o
               ; CMP    r0, 0
               ; BEQ    NONLINEAR_LOOP

               LDR    r1, xp0
               LDR    r0, 40
               STR    r0, [r1] ; xp0
               ADD    r1, 2
               STR    r0, [r1] ; xp1
               ADD    r1, 2
               STR    r0, [r1] ; xp2

        ;-------------------------------------------------------------------------------
        ; copy X[0:5] to Y[0:5]
        ;-------------------------------------------------------------------------------
        
        BACKUP_INIT:
               LDR    r1, START_OF_X
               LDR    r2, START_OF_Y

        BACKUP_LOOP:
               LDR    r0, [r1]
               STR    r0, [r2]
               ADD    r1, 1
               ADD    r2, 1
               CMP    r1, {START_OF_X + 5} ; backup 6 data points
               BNE    BACKUP_LOOP
    WAK

;-------------------------------------------------------------------------------

OUTPUT_ORIGINAL_IMAGE:

    LDR     r0, START_OF_X
    BL      OUTPUT_DATA_BLOCK   ; Output the image
     
;-------------------------------------------------------------------------------
 
;-------------------------------------------------------------------------------

DEBUG:
          
;-------------------------------------------------------------------------------

    ;LDR     r0, START_OF_Y
    ;BL      OUTPUT_DATA_BLOCK
             
    ;LDR     r0, START_OF_Z
    ;BL      OUTPUT_DATA_BLOCK

;-------------------------------------------------------------------------------

    B       START



;-------------------------------------------------------------------------------
; OUTPUT_DATA_BLOCK
;
; Description:
;
;   The output function, which dumps 64 bytes of data out through the column
;   data bus.  This can be called with different starting addresses to determine
;   whether X, Y, Z or some other block is output.
;
; Inputs:
;
;   r0          The address to begin outputing.  The last byte will be output
;               from address r0+63.
;
; Outputs:
;
;   -           64 bytes for each NP on column data bus.
;
; Registers Modified:
;
;   r0, r1
;-------------------------------------------------------------------------------

OUTPUT_DATA_BLOCK:

    LDR     r1, r0          ; Calculate the final address.
    ADD     r1, NUM_PIXELS      

OUTPUT_DATA_BLOCK_LOOP:

    OUT     [r0], 0          ; Row 0
    OUT     [r0], 1          ; Row 1
    OUT     [r0], 2          ; Row 2
    OUT     [r0], 3          ; Row 3
    OUT     [r0], 4          ; Row 4
    OUT     [r0], 5          ; Row 5
    OUT     [r0], 6          ; Row 6
    OUT     [r0], 7          ; Row 7
    
    ADD     r0, 1
    CMP     r0, r1
    BNE     OUTPUT_DATA_BLOCK_LOOP
    BX 
