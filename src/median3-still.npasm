;-------------------------------------------------------------------------------
; median3.asm
;
; Applies a 3x3 median filter over the entire image.  This removes fine lines
; and reduces speckle.  Currently edge-cases are not handled any different than
; the rest of the image.
;-------------------------------------------------------------------------------

; Define new instruction labels to make the code intuitive to read.

#define PXL_ROW_MASK        00111000b   ; The row bits for pixels
#define PXL_COL_MASK        00000111b   ; The column bits for pixels

#define PXL_EDGE_N          00000000b   ; Matches pixels on N edge of NP
#define PXL_EDGE_S          00111000b   ; Matches pixels on S edge of NP
#define PXL_EDGE_W          00000000b   ; Matches pixels on W edge of NP
#define PXL_EDGE_E          00000111b   ; Matches pixels on E edge of NP
 
#define START_OF_X          00000000b   ; Starting address of X RAM.
#define START_OF_Y          01000000b   ; Starting address of Y RAM.
#define START_OF_Z          10000000b   ; Starting address of X RAM.
#define START_OF_V          11000000b   ; Starting address of V RAM.
 
#define TRUE                 1          ; True pattern
#define FALSE                0          ; False pattern
#define NULL                -1          ; Null pattern

#define NUM_PIXELS          64          ; The number of pixels in the NP.
#define MASK_AF 01000000b               ; Mask for ADC active flag
#define BZ      BEQ                     ; Alias branch if zero to branch if equal
#define BNZ     BNE                     ; Alias branch if not zero to branch if not equal

; Algorithm variables.

#define index               r0          ; The center pixel being evaluated
#define pxl_row             r2          ; The center pixel being evaluated
#define pxl_col             r3          ; The center pixel being evaluated

; Algorithm constants.

; Macros

; Sorts two entries in the kernel
#macro sort2 (a, b)
    LDR r0, z[$a]
    LDR r1, z[$b]
    CMP r0, r1
    ZLS
        STR r1, z[$a]
        STR r0, z[$b]
    WAK
#endmacro
       
;-------------------------------------------------------------------------------

 
START:
 
CLEAN_SLATE_INIT:
 
    LDR     r0, 0           ; Overwrite x ram with constant (note this is in gray code)
    LDR     r2, 00h      
    LDR     r1, r0          ; Calculate the final address
    ADD     r1, 64      

CLEAN_SLATE_LOOP:

    STR     r2, [r0]
    ADD     r0, 1
    CMP     r0, r1
    BNE     CLEAN_SLATE_LOOP
 
ACQUIRE_IMAGE:

    IMG                     ; Acquire a new image from the ADCs

WAIT_FOR_ADC:

    ; At this point, the FSM for the ADC is running.  Read the status register
    ; to check if the conversion is finished. (Note: very inefficient)

    LDR     r0, SR          ; Load the status register
    AND     r0, MASK_AF     ; Check if the ADC is active
    BNZ     WAIT_FOR_ADC    ; Loop while the ADC is converting
 
AI_CONVERT_TO_BINARY:
    
    LDR     r0, START_OF_X  ; Start of image
    LDR     r1, r0
    ADD     r1, NUM_PIXELS  ; End of image

AI_CTB_LOOP:

    LDR     r2, [r0]    ; Convert gray to binary code
    GTB     r2
    STR     r2, [r0]
    ADD     r0, 1
    CMP     r0, r1
    BNE     AI_CTB_LOOP

OUTPUT_ORIGINAL_IMAGE:

    LDR     r0, START_OF_X
    BL      Output_Data_Block   ; Output the image

;-------------------------------------------------------------------------------

MEDIAN3:

M3_INIT:

    LDR     index, 0                   ; Start with the upper-left pixel

M3_LOOP:

    ; Save variables for the row and column number of the current pixel index.

    LDR     pxl_row, index
    AND     pxl_row, PXL_ROW_MASK
    LDR     pxl_col, index
    AND     pxl_col, PXL_COL_MASK

LOAD_KERNEL:

    ; Copy the kernel values into a separate memory location to prevent the
    ; image from being corrupted and to give prepare them for the median 
    ; search algorithm, which expects them to be in a specific location.

;-------------------------------------------------------------------------------

LOAD_KERNEL_CENTER:

    ; First copy the center pixel from x[index], to z[4].  Unlike the edge
    ; pixels, this one is always located in the local NP.

    LDR     r1, [index]
    STR     r1, z[4]

;-------------------------------------------------------------------------------

LOAD_KERNEL_NW:

LOAD_KERNEL_NW_CHECK_IF_NW_CORNER:

    CMP     index, {PXL_EDGE_N + PXL_EDGE_W}
    BNE     LOAD_KERNEL_NW_CHECK_IF_N_EDGE
    LDR     r1, x[63]       ; This is the SE pixel to be sent to the SE NP
    LDR     r1, N           ; Move from NW NP to W NP
    LDR     r1, W           ; Move from W NP to local NP
    STR     r1, z[0]
    B       LOAD_KERNEL_N
                                          
LOAD_KERNEL_NW_CHECK_IF_N_EDGE:

    CMP     pxl_row, PXL_EDGE_N
    BNE     LOAD_KERNEL_NW_CHECK_IF_W_EDGE
    ADD     index, 55       ; Get the NW pixel for the NP to the S.
    LDR     r1, [index]
    LDR     r1, N
    STR     r1, z[0]
    SUB     index, 55       ; Return to center
    B       LOAD_KERNEL_N
                                          
LOAD_KERNEL_NW_CHECK_IF_W_EDGE:

    CMP     pxl_col, PXL_EDGE_W
    BNE     LOAD_KERNEL_NW_IS_IN_INTERIOR
    SUB     index, 1        ; Get the NW pixel for the NP to the E.
    LDR     r1, [index]
    LDR     r1, W
    STR     r1, z[0]
    ADD     index, 1        ; Return to center
    B       LOAD_KERNEL_N
     
LOAD_KERNEL_NW_IS_IN_INTERIOR:

    SUB     index, 9        ; This moves to the pixel NW of index
    LDR     r1, [index]
    STR     r1, z[0]
    ADD     index, 9        ; return to center
    B       LOAD_KERNEL_N

;-------------------------------------------------------------------------------

LOAD_KERNEL_N:

LOAD_KERNEL_N_CHECK_IF_N_EDGE:
                              
    CMP     pxl_row, PXL_EDGE_N
    BNE     LOAD_KERNEL_N_IS_IN_INTERIOR
    ADD     index, 56       ; Get the N pixel for the NP to the S.
    LDR     r1, [index]
    LDR     r1, N
    STR     r1, z[1]
    SUB     index, 56       ; Return to center
    B       LOAD_KERNEL_NE
                          
LOAD_KERNEL_N_IS_IN_INTERIOR:

    SUB     index, 8        ; This moves to the pixel N of index
    LDR     r1, [index]
    STR     r1, z[1]
    ADD     index, 8        ; return to center
    B       LOAD_KERNEL_NE
                              
;-------------------------------------------------------------------------------

LOAD_KERNEL_NE:

LOAD_KERNEL_NE_CHECK_IF_NE_CORNER:

    CMP     index, {PXL_EDGE_N + PXL_EDGE_E}
    BNE     LOAD_KERNEL_NE_CHECK_IF_N_EDGE
    LDR     r1, x[56]       ; This is the SE pixel to be sent to the SE NP
    LDR     r1, N           ; Move from NE NP to E NP
    LDR     r1, E           ; Move from E NP to local NP
    STR     r1, z[2]
    B       LOAD_KERNEL_E
                    
LOAD_KERNEL_NE_CHECK_IF_N_EDGE:

    CMP     pxl_row, PXL_EDGE_N
    BNE     LOAD_KERNEL_NE_CHECK_IF_E_EDGE
    ADD     index, 57       ; Get the NE pixel for the NP to the S.
    LDR     r1, [index]
    LDR     r1, N
    STR     r1, z[2]
    SUB     index, 57       ; Return to center
    B       LOAD_KERNEL_E
                    
LOAD_KERNEL_NE_CHECK_IF_E_EDGE:

    CMP     pxl_col, PXL_EDGE_E
    BNE     LOAD_KERNEL_NE_IS_IN_INTERIOR
    SUB     index, 15       ; Get the NE pixel for the NP to the W.
    LDR     r1, [index]
    LDR     r1, E
    STR     r1, z[2]
    ADD     index, 15       ; Return to center
    B       LOAD_KERNEL_E
     
LOAD_KERNEL_NE_IS_IN_INTERIOR:

    SUB     index, 7        ; This moves to the pixel NE of index
    LDR     r1, [index]
    STR     r1, z[2]
    ADD     index, 7        ; return to center
    B       LOAD_KERNEL_E
             
;-------------------------------------------------------------------------------

LOAD_KERNEL_E:

LOAD_KERNEL_E_CHECK_IF_E_EDGE:
                              
    CMP     pxl_col, PXL_EDGE_E
    BNE     LOAD_KERNEL_E_IS_IN_INTERIOR
    SUB     index, 7        ; Get the E pixel for the NP to the W.
    LDR     r1, [index]
    LDR     r1, E
    STR     r1, z[5]
    ADD     index, 7        ; Return to center
    B       LOAD_KERNEL_SE
                          
LOAD_KERNEL_E_IS_IN_INTERIOR:

    ADD     index, 1        ; This moves to the pixel E of index
    LDR     r1, [index]
    STR     r1, z[5]
    SUB     index, 1        ; return to center
    B       LOAD_KERNEL_SE
                         
;-------------------------------------------------------------------------------

LOAD_KERNEL_SE:

LOAD_KERNEL_SE_CHECK_IF_SE_CORNER:

    CMP     index, {PXL_EDGE_S + PXL_EDGE_E}
    BNE     LOAD_KERNEL_SE_CHECK_IF_S_EDGE
    LDR     r1, x[0]        ; This is the SE pixel for the NW NP
    LDR     r1, S           ; Move from SE NP to E NP
    LDR     r1, E           ; Move from E NP to local NP
    STR     r1, z[8]
    B       LOAD_KERNEL_S

LOAD_KERNEL_SE_CHECK_IF_S_EDGE:

    CMP     pxl_row, PXL_EDGE_S
    BNE     LOAD_KERNEL_SE_CHECK_IF_E_EDGE
    SUB     index, 55       ; Get the SE pixel for the NP to the N.
    LDR     r1, [index]
    LDR     r1, S
    STR     r1, z[8]
    ADD     index, 55       ; Return to center
    B       LOAD_KERNEL_S
                 
LOAD_KERNEL_SE_CHECK_IF_E_EDGE:

    CMP     pxl_col, PXL_EDGE_E
    BNE     LOAD_KERNEL_SE_IS_IN_INTERIOR
    ADD     index, 1        ; Get the SE pixel for the NP to the W.
    LDR     r1, [index]
    LDR     r1, E
    STR     r1, z[8]
    SUB     index, 1        ; Return to center
    B       LOAD_KERNEL_S
                 
LOAD_KERNEL_SE_IS_IN_INTERIOR:

    ADD     index, 9        ; This moves to the pixel SE of index
    LDR     r1, [index]
    STR     r1, z[8]
    SUB     index, 9        ; return to center
    B       LOAD_KERNEL_S
     
;-------------------------------------------------------------------------------

LOAD_KERNEL_S:

LOAD_KERNEL_S_CHECK_IF_S_EDGE:
                              
    CMP     pxl_row, PXL_EDGE_S
    BNE     LOAD_KERNEL_S_IS_IN_INTERIOR
    SUB     index, 56       ; Get the S pixel for the NP to the N.
    LDR     r1, [index]
    LDR     r1, S
    STR     r1, z[7]
    ADD     index, 56       ; Return to center
    B       LOAD_KERNEL_SW
                          
LOAD_KERNEL_S_IS_IN_INTERIOR:

    ADD     index, 8        ; This moves to the pixel S of index
    LDR     r1, [index]
    STR     r1, z[7]
    SUB     index, 8        ; return to center
    B       LOAD_KERNEL_SW
                               
;-------------------------------------------------------------------------------

LOAD_KERNEL_SW:

LOAD_KERNEL_SW_CHECK_IF_SW_CORNER:

    CMP     index, {PXL_EDGE_S + PXL_EDGE_W}
    BNE     LOAD_KERNEL_SW_CHECK_IF_S_EDGE
    LDR     r1, x[7]        ; This is the SW pixel to be sent to the NE NP
    LDR     r1, S           ; Move from SW NP to W NP
    LDR     r1, W           ; Move from W NP to local NP
    STR     r1, z[6]
    B       LOAD_KERNEL_W
                 
LOAD_KERNEL_SW_CHECK_IF_S_EDGE:

    CMP     pxl_row, PXL_EDGE_S
    BNE     LOAD_KERNEL_SW_CHECK_IF_W_EDGE
    SUB     index, 57       ; Get the SW pixel for the NP to the N.
    LDR     r1, [index]
    LDR     r1, S
    STR     r1, z[6]
    ADD     index, 57       ; Return to center
    B       LOAD_KERNEL_W
                 
LOAD_KERNEL_SW_CHECK_IF_W_EDGE:

    CMP     pxl_col, PXL_EDGE_W
    BNE     LOAD_KERNEL_SW_IS_IN_INTERIOR
    ADD     index, 15       ; Get the SW pixel for the NP to the E.
    LDR     r1, [index]
    LDR     r1, W
    STR     r1, z[6]
    SUB     index, 15       ; Return to center
    B       LOAD_KERNEL_W
     
LOAD_KERNEL_SW_IS_IN_INTERIOR:

    ADD     index, 7        ; This moves to the pixel SW of index
    LDR     r1, [index]
    STR     r1, z[6]
    SUB     index, 7        ; return to center
    B       LOAD_KERNEL_W
     
;-------------------------------------------------------------------------------

LOAD_KERNEL_W:

LOAD_KERNEL_W_CHECK_IF_W_EDGE:
                              
    CMP     pxl_col, PXL_EDGE_W
    BNE     LOAD_KERNEL_W_IS_IN_INTERIOR
    ADD     index, 7        ; Get the W pixel for the NP to the E.
    LDR     r1, [index]
    LDR     r1, W
    STR     r1, z[3]
    SUB     index, 7        ; Return to center
    B       FIND_MEDIAN
                          
LOAD_KERNEL_W_IS_IN_INTERIOR:

    SUB     index, 1        ; This moves to the pixel W of index
    LDR     r1, [index]
    STR     r1, z[3]
    ADD     index, 1        ; return to center
    B       FIND_MEDIAN

;-------------------------------------------------------------------------------

FIND_MEDIAN:

    LDR     r3, index           ; Find the index in the resulting filtered image
    ADD     r3, START_OF_Y
    BL      Find_Kernel_Median  ; Compute the median value, return in r0
    STR     r0, [r3]            ; Store the median in Y memory
    SUB     r3, START_OF_Y      ; Restore the index
    LDR     index, r3

CHECK_LOOP_CONDITION:

    ADD     index, 1
    CMP     index, NUM_PIXELS
    BLT     M3_LOOP
    
M3_LOOP_END:

    LDR     r0, START_OF_Y
    BL      Output_Data_Block   ; Output the image
    B       START               ; Infinite loop
                                              


;-------------------------------------------------------------------------------                                        
; Find the median of a 3x3 kernel.  The 9 input values are assumed to be in
; z[0]..z[8] and the median value is returned in r0.  This code follows a macro
; obtained from http://ndevilla.free.fr/median/median/src/optmed.c and verified
; in python.
;
; Inputs:
;
;   z[0..8]     A vector of 9 values of which to find the median.
;
; Outputs:
;
;   r0          Median value
; 
; Registers Modified:
;
;   r0, r1
;-------------------------------------------------------------------------------                                        

Find_Kernel_Median:

    ; Use macros to perform the sorting to avoid wasting cycles with BL/BX.
    ; The median value ends up in z[4], which is return in r0.

    sort2(1, 2)
    sort2(1, 2)
    sort2(4, 5)
    sort2(7, 8)
    sort2(0, 1)
    sort2(3, 4)
    sort2(6, 7)
    sort2(1, 2)
    sort2(4, 5)
    sort2(7, 8)
    sort2(5, 8)
    sort2(4, 7)
    sort2(0, 3)
    sort2(3, 6)
    sort2(2, 5)
    sort2(1, 4)
    sort2(4, 7)
    sort2(4, 2)
    sort2(6, 4)
    sort2(4, 2)
    LDR     r0, z[4]
    BX



;-------------------------------------------------------------------------------
; Output_Data_Block
;
; Description:
;
;   The output function, which dumps 64 bytes of data out through the column
;   data bus.  This can be called with different starting addresses to determine
;   whether X, Y, Z or some other block is output.
;
; Inputs:
;
;   r0          The address to begin outputing.  The last byte will be output
;               from address r0+63.
;
; Outputs:
;
;   -           64 bytes for each NP on column data bus.
;
; Registers Modified:
;
;   r0, r1
;-------------------------------------------------------------------------------

Output_Data_Block:

    LDR     r1, r0          ; Calculate the final address.
    ADD     r1, 64      

OUTPUT_DATA_BLOCK_LOOP:

    OUT     [r0], 0          ; Row 0
    OUT     [r0], 1          ; Row 1
    OUT     [r0], 2          ; Row 2
    OUT     [r0], 3          ; Row 3
    OUT     [r0], 4          ; Row 4
    OUT     [r0], 5          ; Row 5
    OUT     [r0], 6          ; Row 6
    OUT     [r0], 7          ; Row 7
    
    ADD     r0, 1
    CMP     r0, r1
    BNE     OUTPUT_DATA_BLOCK_LOOP
    BX 
