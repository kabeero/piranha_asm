;-------------------------------------------------------------------------------
; img-cds.npasm
;-------------------------------------------------------------------------------

#define MASK_AF        01000000b   ; Mask for ADC active flag
#define MASK_NF        00000100b   ; Mask for negative flag
#define BZ             BEQ         ; Alias branch if zero to branch if equal
#define BNZ            BNE         ; Alias branch if not zero to branch if not equal
#define START_OF_X     00000000b   ; Start address of X RAM
#define START_OF_Y     01000000b   ; Start address of X RAM
#define START_OF_Z     10000000b   ; Start address of X RAM

START:

    NOP                     ; Add dummy cycle since imaging immediately on 
                            ;   reset is awkward for simulation purposes.

CLEAN_SLATE_INIT:
 
    LDR     r0, START_OF_X  ; Overwrite x ram with constant (note this is in gray code)
    LDR     r2, 255      
    LDR     r1, r0          ; Calculate the final address
    ADD     r1, 64      

CLEAN_SLATE_LOOP:

    STR     r2, [r0]
    ADD     r0, 1
    CMP     r0, r1
    BNE     CLEAN_SLATE_LOOP
 
ACQUIRE_RESET_IMAGE:

    IMG                     ; Acquire a new image from the ADCs with t_int = 0

WAIT_FOR_RESET_ADC:

    LDR     r0, SR                ; Load the status register
    AND     r0, MASK_AF           ; Check if the ADC is active
    BNZ     WAIT_FOR_RESET_ADC    ; Loop while the ADC is converting

MOVE_TO_Y_INIT:

    LDR     r1, START_OF_X
    LDR     r2, START_OF_Y

MOVE_TO_Y:

    LDR     r0, [r1]
    GTB     r0
    STR     r0, [r2]
    ADD     r1, 1
    ADD     r2, 1
    CMP     r1, 64
    BNE     MOVE_TO_Y

ACQUIRE_IMAGE:

    IMG                     ; Acquire a new image from the ADCs with real t_int

OUTPUT_DATA_BLOCK_INIT:

    ; Begin outputting all of the data in z, which is the newly captured image.

    LDR     r0, START_OF_Z  ; Output z ram
    LDR     r1, r0          ; Calculate the final address
    ADD     r1, 64      

OUTPUT_DATA_BLOCK_LOOP:

    LDR     r2, [r0]
    STR     r2, [r0]
    OUT     [r0], 0         ; Row 0
    OUT     [r0], 1         ; Row 1
    OUT     [r0], 2         ; Row 2
    OUT     [r0], 3         ; Row 3
    OUT     [r0], 4         ; Row 4
    OUT     [r0], 5         ; Row 5
    OUT     [r0], 6         ; Row 6
    OUT     [r0], 7         ; Row 7
    
    ADD     r0, 1
    CMP     r0, r1
    BNE     OUTPUT_DATA_BLOCK_LOOP

WAIT_FOR_ADC:

    ; At this point, the FSM for the ADC is running.  Read the status register
    ; to check if the conversion is finished. (Note: very inefficient)

    LDR     r0, SR          ; Load the status register
    AND     r0, MASK_AF     ; Check if the ADC is active
    BNZ     WAIT_FOR_ADC    ; Loop while the ADC is converting

DIFFERENCE_INIT:

    LDR     r2, START_OF_Y
    LDR     r3, START_OF_Z

DIFFERENCE:

    LDR     r0, [r2]
    GTB     r0
    STR     r0, [r3]
    ADD     r2, 1
    ADD     r3, 1
    CMP     r2, 64
    BNE     DIFFERENCE

END:

    B       START
