  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         | ; tracking-cds.npasm
  0 000h |                         | ;
  0 000h |                         | ; Tracks an individual target across the imaging area.  It performs frame 
  0 000h |                         | ; differencing followed by a centroid-calculation to find the object 
  0 000h |                         | ; coordinates.  It assumes the object moves very little between frames.
  0 000h |                         | ;
  0 000h |                         | ; The algorithm works by first binarizing the image into a black and white 
  0 000h |                         | ; bitmap.  It then generates two histograms, one for the number of motion pixels
  0 000h |                         | ; in each column of the image and a second for each row of the image.  The total
  0 000h |                         | ; number of motion pixels in the image is calculated.  The centroid for the 
  0 000h |                         | ; columns/rows is determined by integrating the column and row histograms until 
  0 000h |                         | ; the point where half the total motion pixels have been accounted for.  This
  0 000h |                         | ; corresponds to a sort of center of mass, or centroid, of the motion.  The
  0 000h |                         | ; coordinates are saved and transmitted.
  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         | 
  0 000h |                         | ; Define new instruction labels to make the code intuitive to read.
  0 000h |                         | 
  0 000h |                         | #define PXL_ROW_MASK    00111000b   ; The row bits for pixels
  0 000h |                         | #define PXL_COL_MASK    00000111b   ; The column bits for pixels
  0 000h |                         | 
  0 000h |                         | #define PXL_EDGE_N      00000000b   ; Matches pixels on N edge of NP
  0 000h |                         | #define PXL_EDGE_S      00111000b   ; Matches pixels on S edge of NP
  0 000h |                         | #define PXL_EDGE_W      00000000b   ; Matches pixels on W edge of NP
  0 000h |                         | #define PXL_EDGE_E      00000111b   ; Matches pixels on E edge of NP
  0 000h |                         |  
  0 000h |                         | #define START_OF_X      00000000b   ; Starting address of X RAM.
  0 000h |                         | #define START_OF_Y      01000000b   ; Starting address of Y RAM.
  0 000h |                         | #define START_OF_Z      10000000b   ; Starting address of Z RAM.
  0 000h |                         | #define START_OF_V      11000000b   ; Starting address of V RAM.
  0 000h |                         |  
  0 000h |                         | #define NUM_PIXELS      64          ; The number of pixels in the NP.
  0 000h |                         | #define MASK_AF         01000000b   ; Mask for ADC active flag
  0 000h |                         | #define MASK_NF         00000100b   ; Mask for negative flag
  0 000h |                         | 
  0 000h |                         | ; Algorithm constants.
  0 000h |                         | 
  0 000h |                         | #define THRESHOLD       16          ; Min frame diff. before detection
  0 000h |                         | 
  0 000h |                         | ; Algorithm variables.
  0 000h |                         |  
  0 000h |                         | #define index           r0          ; The current pixel index 0..63
  0 000h |                         | #define pxlr            r2          ; The current pixel row 0..7
  0 000h |                         | #define pxlc            r3          ; The current pixel column 0..7
  0 000h |                         |                            
  0 000h |                         | #define NULL_BB         0           ; Indicates no bounding box found
  0 000h |                         | 
  0 000h |                         | #define xmin            z[0]        ; Motion bounding box NW corner x
  0 000h |                         | #define ymin            z[1]        ; Motion bounding box NW corner y
  0 000h |                         | #define xmax            z[2]        ; Motion bounding box SE corner x
  0 000h |                         | #define ymax            z[3]        ; Motion bounding box SE corner y
  0 000h |                         |              
  0 000h |                         | #define xmin_in         z[4]        ; Motion bounding box NW corner x
  0 000h |                         | #define ymin_in         z[5]        ; Motion bounding box NW corner y
  0 000h |                         | #define xmax_in         z[6]        ; Motion bounding box SE corner x
  0 000h |                         | #define ymax_in         z[7]        ; Motion bounding box SE corner y
  0 000h |                         | 
  0 000h |                         | #define coord_pointer   v0          ; Address to save coordinate pairs
  0 000h |                         |              
  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         |       
  0 000h |                         | ; Zeroes all of Z memory where the data is stored.  This isn't required,
  0 000h |                         | ; but it makes the output easier to debug.
  0 000h |                         |          
  0 000h |                         | CLEAR_HIST:
  0 000h |                         | 
  0 000h |                         | CLEAR_HIST_INIT:
  0 000h |                         | 
  0 000h | 4180h 0100000110000000b |     LDR     r0, START_OF_Z
  1 001h | 4300h 0100001100000000b |     LDR     r1, 0
  2 002h |                         | 
  2 002h |                         | CLEAR_HIST_LOOP:
  2 002h |                         | 
  2 002h | 4AF0h 0100101011110000b |     STR     r1, [r0]
  3 003h | 0101h 0000000100000001b |     ADD     r0, 1
  4 004h | 39C0h 0011100111000000b |     CMP     r0, {START_OF_Z + NUM_PIXELS}
  5 005h | C023h 1100000000100011b |     BLO     CLEAR_HIST_LOOP
  6 006h |                         | 
  6 006h |                         | INIT_COORD_PTR:
  6 006h |                         |                                           
  6 006h | 4188h 0100000110001000b |     LDR     r0, {START_OF_Z + 8} ; Store coordinates in Z, skipping min/max vars
  7 007h | 48C0h 0100100011000000b |     STR     r0, coord_pointer
  8 008h |                         | 
  8 008h |                         | ;-------------------------------------------------------------------------------
  8 008h |                         |  
  8 008h |                         | START:
  8 008h |                         |      
  8 008h |                         | ; Set the image memory to a consistent value to make it clearer when pixels are 
  8 008h |                         | ; not triggering properly.
  8 008h |                         |                                           
  8 008h |                         | CLEAN_SLATE_INIT:
  8 008h |                         |  
  8 008h | 4100h 0100000100000000b |     LDR     r0, START_OF_X  ; Overwrite x ram with constant (note this is in gray code)
  9 009h | 4500h 0100010100000000b |     LDR     r2, 00h      
 10 00Ah | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address
 11 00Bh | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS 
 12 00Ch |                         | 
 12 00Ch |                         | CLEAN_SLATE_LOOP:
 12 00Ch |                         | 
 12 00Ch | 4CF0h 0100110011110000b |     STR     r2, [r0]
 13 00Dh | 0101h 0000000100000001b |     ADD     r0, 1
 14 00Eh | 38D1h 0011100011010001b |     CMP     r0, r1
 15 00Fh | C0C3h 1100000011000011b |     BLO     CLEAN_SLATE_LOOP
 16 010h |                         | 
 16 010h |                         | ACQUIRE_IMAGE_RESET:
 16 010h |                         | 
 16 010h | 8220h 1000001000100000b |     IMG                     ; Acquire a new image from the ADCs with 0 t_int
 17 011h |                         | 
 17 011h |                         | WAIT_FOR_ADC_RESET:
 17 011h |                         | 
 17 011h | 40F4h 0100000011110100b |     LDR     r0, SR             ; Load the status register
 18 012h | 2140h 0010000101000000b |     AND     r0, MASK_AF        ; Check if the ADC is active
 19 013h | C111h 1100000100010001b |     BNZ     WAIT_FOR_ADC_RESET ; Loop while the ADC is converting
 20 014h |                         | 
 20 014h |                         | MOVE_TO_Z_INIT:
 20 014h |                         | 	
 20 014h | 4300h 0100001100000000b |     LDR     r1, START_OF_X
 21 015h | 4580h 0100010110000000b |     LDR     r2, START_OF_Z
 22 016h |                         | 
 22 016h |                         | MOVE_TO_Z:
 22 016h |                         | 
 22 016h | 40F1h 0100000011110001b |     LDR     r0, [r1]
 23 017h | 8820h 1000100000100000b |     GTB     r0
 24 018h | 48F2h 0100100011110010b |     STR     r0, [r2]
 25 019h | 0301h 0000001100000001b |     ADD     r1, 1
 26 01Ah | 0501h 0000010100000001b |     ADD     r2, 1
 27 01Bh | 3B40h 0011101101000000b |     CMP     r1, NUM_PIXELS
 28 01Ch | C161h 1100000101100001b |     BNE     MOVE_TO_Z
 29 01Dh |                         |      
 29 01Dh |                         | ACQUIRE_IMAGE:
 29 01Dh |                         | 
 29 01Dh | 8220h 1000001000100000b |     IMG                     ; Acquire a new image from the ADCs with real t_int
 30 01Eh |                         | 
 30 01Eh |                         | WAIT_FOR_ADC:
 30 01Eh |                         | 
 30 01Eh |                         |     ; At this point, the FSM for the ADC is running.  Read the status register
 30 01Eh |                         |     ; to check if the conversion is finished. (Note: very inefficient)
 30 01Eh |                         |     ; Can be done after reading out to operate on last packet's data
 30 01Eh |                         | 
 30 01Eh | 40F4h 0100000011110100b |     LDR     r0, SR          ; Load the status register
 31 01Fh | 2140h 0010000101000000b |     AND     r0, MASK_AF     ; Check if the ADC is active
 32 020h | C1E1h 1100000111100001b |     BNZ     WAIT_FOR_ADC    ; Loop while the ADC is converting
 33 021h |                         | 
 33 021h |                         | DIFFERENCE_INIT:
 33 021h |                         |     
 33 021h | 4300h 0100001100000000b |     LDR     r1, START_OF_X
 34 022h | 4580h 0100010110000000b |     LDR     r2, START_OF_Z
 35 023h |                         | 
 35 023h |                         | DIFFERENCE:
 35 023h |                         | 
 35 023h | 40F1h 0100000011110001b |     LDR     r0, [r1]
 36 024h | 8820h 1000100000100000b |     GTB     r0
 37 025h | 38F2h 0011100011110010b |     CMP     r0, [r2]        ; Check to make sure that after differencing, we don't go negative
 38 026h | 9008h 1001000000001000b |     ZHI
 39 027h | 40F2h 0100000011110010b |        LDR  r0, [r2]
 40 028h | 8240h 1000001001000000b |     WAK
 41 029h | 10F2h 0001000011110010b |     SUB     r0, [r2]
 42 02Ah | 48F1h 0100100011110001b |     STR     r0, [r1]        ; Store difference in X
 43 02Bh | 0301h 0000001100000001b |     ADD     r1, 1
 44 02Ch | 0501h 0000010100000001b |     ADD     r2, 1
 45 02Dh | 3B40h 0011101101000000b |     CMP     r1, NUM_PIXELS
 46 02Eh | C231h 1100001000110001b |     BNE     DIFFERENCE 
 47 02Fh |                         |      
 47 02Fh |                         | ;OUTPUT_BLANK_IMAGE:
 47 02Fh |                         | ;
 47 02Fh |                         | ;    LDR     r0, START_OF_Z      ; Location of blank image
 47 02Fh |                         | ;    BL      OUTPUT_DATA_BLOCK   ; Output the image
 47 02Fh |                         | 
 47 02Fh |                         | CLEAN_SLATE_INIT_Z:
 47 02Fh |                         |  
 47 02Fh | 4180h 0100000110000000b |     LDR     r0, START_OF_Z  ; Overwrite z ram with constant (note this is in gray code)
 48 030h | 4500h 0100010100000000b |     LDR     r2, 00h      
 49 031h | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address
 50 032h | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS 
 51 033h |                         | 
 51 033h |                         | CLEAN_SLATE_LOOP_Z:
 51 033h |                         | 
 51 033h | 4CF0h 0100110011110000b |     STR     r2, [r0]
 52 034h | 0101h 0000000100000001b |     ADD     r0, 1
 53 035h | 38D1h 0011100011010001b |     CMP     r0, r1
 54 036h | C333h 1100001100110011b |     BLO     CLEAN_SLATE_LOOP_Z
 55 037h |                         | 
 55 037h |                         | CONVERT_TO_SIGNED:
 55 037h |                         | 
 55 037h |                         | CONVERT_TO_SIGNED_INIT:
 55 037h |                         | 
 55 037h | 4100h 0100000100000000b |     LDR     r0, START_OF_X
 56 038h |                         | 
 56 038h |                         | CONVERT_TO_SIGNED_LOOP:
 56 038h |                         | 
 56 038h | 42F0h 0100001011110000b |     LDR     r1, [r0]
 57 039h | 8A40h 1000101001000000b |     LSR     r1          ; Max value is +127 now
 58 03Ah | 4AF0h 0100101011110000b |     STR     r1, [r0]
 59 03Bh | 0101h 0000000100000001b |     ADD     r0, 1
 60 03Ch | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
 61 03Dh | C383h 1100001110000011b |     BLO     CONVERT_TO_SIGNED_LOOP
 62 03Eh |                         |  
 62 03Eh |                         | ;-------------------------------------------------------------------------------
 62 03Eh |                         |  
 62 03Eh |                         | ; Iterate through every pixel in the new image (in X) and subtract the old, 
 62 03Eh |                         | ; previous image (in Y).  The math here is signed since differences can be 
 62 03Eh |                         | ; positive or negative.  Because of this, images are always divided by a factor 
 62 03Eh |                         | ; of two in order to prevent overflow during math operations.  The previous 
 62 03Eh |                         | ; frame is stored in this signed representation as well.
 62 03Eh |                         |  
 62 03Eh |                         | FRAME_DIFFERENCE:
 62 03Eh |                         | 
 62 03Eh |                         | FD_LOOP_INIT:
 62 03Eh |                         |  
 62 03Eh |                         |     ; Store bounding box coordinates for this NP in V memory.
 62 03Eh |                         | 
 62 03Eh | 4100h 0100000100000000b |     LDR r0, 0           ; Clear coordinates, 0 is reserved for NULL
 63 03Fh | 4880h 0100100010000000b |     STR r0, xmin
 64 040h | 4881h 0100100010000001b |     STR r0, ymin
 65 041h | 4882h 0100100010000010b |     STR r0, xmax
 66 042h | 4883h 0100100010000011b |     STR r0, ymax
 67 043h |                         |                                          
 67 043h | 4100h 0100000100000000b |     LDR index, START_OF_X      ; Initialize index variables
 68 044h |                         |                           
 68 044h |                         | FD_LOOP:
 68 044h |                         | 
 68 044h | 46D0h 0100011011010000b |     LDR     pxlc, index         ; Update row/column variables
 69 045h | 2707h 0010011100000111b |     AND     pxlc, PXL_COL_MASK
 70 046h | 0701h 0000011100000001b |     ADD     pxlc, 1             ; C/R numbered from 1-8 since 0 is NULL
 71 047h | 44D0h 0100010011010000b |     LDR     pxlr, index
 72 048h | 8C40h 1000110001000000b |     LSR     pxlr
 73 049h | 8C40h 1000110001000000b |     LSR     pxlr
 74 04Ah | 8C40h 1000110001000000b |     LSR     pxlr
 75 04Bh | 0501h 0000010100000001b |     ADD     pxlr, 1             ; C/R numbered from 1-8 since 0 is NULL
 76 04Ch |                         | 
 76 04Ch | 42F0h 0100001011110000b |     LDR     r1, [r0]        ; Load the new pixel value
 77 04Dh | 0140h 0000000101000000b |     ADD     r0, START_OF_Y  ; Find correspond Y pixel
 78 04Eh | 12F0h 0001001011110000b |     SUB     r1, [r0]        ; signed(new) - signed(old)
 79 04Fh | 9005h 1001000000000101b |     ZPL                     ; If negative, negate to find absolute value
 80 050h | 33FFh 0011001111111111b |         EOR     r1, FFh     ; For two's compliment, xor(x, FFh)+1 = -x
 81 051h | 0301h 0000001100000001b |         ADD     r1, 1
 82 052h | 8240h 1000001001000000b |     WAK
 83 053h | 3B10h 0011101100010000b |     CMP     r1, THRESHOLD   ; Binarize image based on threshold
 84 054h | 9003h 1001000000000011b |     ZLO
 85 055h | 43FFh 0100001111111111b |         LDR     r1, 255     ; This makes it easier to debug, but is not req'd
 86 056h | 4AF0h 0100101011110000b |         STR     r1, [r0]
 87 057h | 4280h 0100001010000000b |         LDR     r1, xmin    ; Check if x/y min/max variables are NULL
 88 058h | 3B00h 0011101100000000b |         CMP     r1, 0    
 89 059h | 9001h 1001000000000001b |         ZNE                         ; NPs where this is the 1st detection, so
 90 05Ah | 4E80h 0100111010000000b |             STR     pxlc, xmin      ;   this pixel is the min and max
 91 05Bh | 4C81h 0100110010000001b |             STR     pxlr, ymin
 92 05Ch | 4E82h 0100111010000010b |             STR     pxlc, xmax
 93 05Dh | 4C83h 0100110010000011b |             STR     pxlr, ymax
 94 05Eh | 8240h 1000001001000000b |         WAK
 95 05Fh | 9000h 1001000000000000b |         ZEQ                         ; Execute if current values are valid
 96 060h | 3E80h 0011111010000000b |             CMP     pxlc, xmin      ; Is this the min x encountered?
 97 061h | 900Ah 1001000000001010b |             ZGE
 98 062h | 4E80h 0100111010000000b |                 STR     pxlc, xmin
 99 063h | 8240h 1000001001000000b |             WAK
100 064h | 3C81h 0011110010000001b |             CMP     pxlr, ymin      ; Is this the min y encountered?
101 065h | 900Ah 1001000000001010b |             ZGE
102 066h | 4C81h 0100110010000001b |                 STR     pxlr, ymin
103 067h | 8240h 1000001001000000b |             WAK
104 068h | 3E82h 0011111010000010b |             CMP     pxlc, xmax      ; Is this the max x encountered?
105 069h | 900Dh 1001000000001101b |             ZLE
106 06Ah | 4E82h 0100111010000010b |                 STR     pxlc, xmax
107 06Bh | 8240h 1000001001000000b |             WAK
108 06Ch | 3C83h 0011110010000011b |             CMP     pxlr, ymax      ; Is this the max y encountered?
109 06Dh | 900Dh 1001000000001101b |             ZLE
110 06Eh | 4C83h 0100110010000011b |                 STR     pxlr, ymax
111 06Fh | 8240h 1000001001000000b |             WAK
112 070h | 8240h 1000001001000000b |         WAK
113 071h | 8240h 1000001001000000b |     WAK
114 072h |                         | 
114 072h |                         | FD_LOOP_UPDATE:
114 072h |                         | 
114 072h | 01C1h 0000000111000001b |     ADD     r0, {1 - START_OF_Y}  ; Return to the next pixel in X RAM
115 073h | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
116 074h | C44Bh 1100010001001011b |     BLT     FD_LOOP
117 075h |                         |                          
117 075h |                         | ;-------------------------------------------------------------------------------
117 075h |                         | 
117 075h |                         | COMBINE_BOUNDING_BOXES:
117 075h |                         |      
117 075h |                         | CBB_ROW:
117 075h |                         | 
117 075h |                         | CBB_ROW_INIT:
117 075h |                         | 
117 075h | 4707h 0100011100000111b |     LDR     r3, 7       ; Number of shifts to perform, #ROWS-1
118 076h |                         | 
118 076h |                         | CBB_ROW_LOOP:
118 076h |                         | 
118 076h |                         |     ; When combining bounding boxes, several cases may occur:
118 076h |                         |     ;
118 076h |                         |     ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
118 076h |                         |     ;       this case, the coordinate pairs should remain NULL
118 076h |                         |     ;
118 076h |                         |     ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
118 076h |                         |     ;       case, the incoming coordinate pairs should overwrite the local ones.
118 076h |                         |     ;
118 076h |                         |     ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
118 076h |                         |     ;       the coordinate pairs should not be modified.
118 076h |                         |     ;
118 076h |                         |     ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
118 076h |                         |     ;       coordinate pair must be compared and the more inclusive one saved.
118 076h |                         |     ;
118 076h |                         |     ; NOTE: When an NP is asleep, it will not write any data to memory or 
118 076h |                         |     ;       registers, so any data that needs to be access from a sleeping
118 076h |                         |     ;       NP through the NSWE data bus must already be loaded in r0..r3.
118 076h |                         | 
118 076h |                         |     ; Copy incoming coordinates locally to prevent NPs from receiving 
118 076h |                         |     ; out-of-sync data.
118 076h |                         | 
118 076h | 4080h 0100000010000000b |     LDR     r0, xmin
119 077h | 40E2h 0100000011100010b |     LDR     r0, S
120 078h | 4884h 0100100010000100b |     STR     r0, xmin_in
121 079h |                         | 
121 079h | 4081h 0100000010000001b |     LDR     r0, ymin
122 07Ah | 40E2h 0100000011100010b |     LDR     r0, S
123 07Bh | 4885h 0100100010000101b |     STR     r0, ymin_in
124 07Ch |                         | 
124 07Ch | 4082h 0100000010000010b |     LDR     r0, xmax
125 07Dh | 40E2h 0100000011100010b |     LDR     r0, S
126 07Eh | 4886h 0100100010000110b |     STR     r0, xmax_in
127 07Fh |                         | 
127 07Fh | 4083h 0100000010000011b |     LDR     r0, ymax
128 080h | 40E2h 0100000011100010b |     LDR     r0, S
129 081h | 4887h 0100100010000111b |     STR     r0, ymax_in
130 082h |                         | 
130 082h |                         |     ; First check if the incoming BB coords are NULL.  If so, the NP will should
130 082h |                         |     ; disregard any incoming coordinates, since they are uninitialized.  It goes
130 082h |                         |     ; to sleep for this loop cycle.
130 082h |                         |       
130 082h | 4084h 0100000010000100b |     LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
131 083h | 3900h 0011100100000000b |     CMP     r0, NULL_BB
132 084h | 9000h 1001000000000000b |     ZEQ
133 085h |                         |  
133 085h |                         |         ; If this NP already found motion pixels itself, it needs to compare 
133 085h |                         |         ; the coords of its own internal bounding box to those it receives to
133 085h |                         |         ; create a new BB that encloses both BBs.
133 085h |                         | 
133 085h | 4080h 0100000010000000b |         LDR     r0, xmin
134 086h | 3900h 0011100100000000b |         CMP     r0, NULL_BB
135 087h | 9000h 1001000000000000b |         ZEQ
136 088h |                         |             ; xmin
136 088h |                         | 
136 088h | 4084h 0100000010000100b |             LDR     r0, xmin_in
137 089h | 3880h 0011100010000000b |             CMP     r0, xmin        ; Compare it to this NP's value
138 08Ah | 9002h 1001000000000010b |             ZHS
139 08Bh | 4880h 0100100010000000b |                 STR     r0, xmin    ; If lower, save it as the new minimum
140 08Ch | 8240h 1000001001000000b |             WAK
141 08Dh |                         | 
141 08Dh |                         |             ; ymin
141 08Dh |                         | 
141 08Dh | 4085h 0100000010000101b |             LDR     r0, ymin_in
142 08Eh | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
143 08Fh | 3881h 0011100010000001b |             CMP     r0, ymin        ; Compare it to this NP's value
144 090h | 9002h 1001000000000010b |             ZHS
145 091h | 4881h 0100100010000001b |                 STR     r0, ymin    ; If lower, save it as the new minimum
146 092h | 8240h 1000001001000000b |             WAK
147 093h |                         |                   
147 093h |                         |             ; xmax
147 093h |                         | 
147 093h | 4086h 0100000010000110b |             LDR     r0, xmax_in
148 094h | 3882h 0011100010000010b |             CMP     r0, xmax        ; Compare it to this NP's value
149 095h | 9009h 1001000000001001b |             ZLS
150 096h | 4882h 0100100010000010b |                 STR     r0, xmax    ; If higher, save it as the new maximum
151 097h | 8240h 1000001001000000b |             WAK
152 098h |                         | 
152 098h |                         |             ; ymin
152 098h |                         |              
152 098h | 4087h 0100000010000111b |             LDR     r0, ymax_in
153 099h | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
154 09Ah | 3883h 0011100010000011b |             CMP     r0, ymax        ; Compare it to this NP's value
155 09Bh | 9009h 1001000000001001b |             ZLS
156 09Ch | 4883h 0100100010000011b |                 STR     r0, ymax    ; If higher, save it as the new maximum
157 09Dh | 8240h 1000001001000000b |             WAK
158 09Eh | 8240h 1000001001000000b |         WAK  
159 09Fh |                         | 
159 09Fh |                         |         ; Next check if this NP found any motion pixels in itself.  If not, all 
159 09Fh |                         |         ; of its x/y min/max entires will be NULL/0 and it can assume the 
159 09Fh |                         |         ; incoming bounding box will enclose its own, as it has none.  So, all
159 09Fh |                         |         ; incoming values are accepted without comparison.
159 09Fh |                         |         ;
159 09Fh |                         |         ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
159 09Fh |                         |         ;       valid for them even though the code above does modify some NPs.
159 09Fh |                         | 
159 09Fh | 4080h 0100000010000000b |         LDR     r0, xmin
160 0A0h | 3900h 0011100100000000b |         CMP     r0, NULL_BB
161 0A1h | 9001h 1001000000000001b |         ZNE                     ; If NULL, use incoming coordinates always
162 0A2h | 4084h 0100000010000100b |             LDR     r0, xmin_in
163 0A3h | 4880h 0100100010000000b |             STR     r0, xmin
164 0A4h | 4085h 0100000010000101b |             LDR     r0, ymin_in
165 0A5h | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
166 0A6h | 4881h 0100100010000001b |             STR     r0, ymin
167 0A7h | 4086h 0100000010000110b |             LDR     r0, xmax_in
168 0A8h | 4882h 0100100010000010b |             STR     r0, xmax
169 0A9h | 4087h 0100000010000111b |             LDR     r0, ymax_in
170 0AAh | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
171 0ABh | 4883h 0100100010000011b |             STR     r0, ymax
172 0ACh | 8240h 1000001001000000b |         WAK
173 0ADh | 8240h 1000001001000000b |     WAK
174 0AEh |                         | 
174 0AEh |                         | CBB_ROW_LOOP_CONDITION:
174 0AEh |                         | 
174 0AEh | 1701h 0001011100000001b |     SUB     r3, 1               ; Indicate an additional shift is complete
175 0AFh | C761h 1100011101100001b |     BNZ     CBB_ROW_LOOP
176 0B0h |                         | 
176 0B0h |                         | ;-------------------------------------------------------------------------------
176 0B0h |                         |       
176 0B0h |                         | CBB_COL:
176 0B0h |                         | 
176 0B0h |                         | CBB_COL_INIT:
176 0B0h |                         | 
176 0B0h | 4709h 0100011100001001b |     LDR     r3, 9       ; Number of shifts to perform, #COLS-1
177 0B1h |                         | 
177 0B1h |                         | CBB_COL_LOOP:
177 0B1h |                         | 
177 0B1h |                         |     ; When combining bounding boxes, several cases may occur:
177 0B1h |                         |     ;
177 0B1h |                         |     ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
177 0B1h |                         |     ;       this case, the coordinate pairs should remain NULL
177 0B1h |                         |     ;
177 0B1h |                         |     ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
177 0B1h |                         |     ;       case, the incoming coordinate pairs should overwrite the local ones.
177 0B1h |                         |     ;
177 0B1h |                         |     ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
177 0B1h |                         |     ;       the coordinate pairs should not be modified.
177 0B1h |                         |     ;
177 0B1h |                         |     ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
177 0B1h |                         |     ;       coordinate pair must be compared and the more inclusive one saved.
177 0B1h |                         |     ;
177 0B1h |                         |     ; NOTE: When an NP is asleep, it will not write any data to memory or 
177 0B1h |                         |     ;       registers, so any data that needs to be access from a sleeping
177 0B1h |                         |     ;       NP through the NSWE data bus must already be loaded in r0..r3.
177 0B1h |                         | 
177 0B1h |                         |     ; Copy incoming coordinates locally to prevent NPs from receiving 
177 0B1h |                         |     ; out-of-sync data.
177 0B1h |                         | 
177 0B1h | 4080h 0100000010000000b |     LDR     r0, xmin
178 0B2h | 40E8h 0100000011101000b |     LDR     r0, E
179 0B3h | 4884h 0100100010000100b |     STR     r0, xmin_in
180 0B4h |                         | 
180 0B4h | 4081h 0100000010000001b |     LDR     r0, ymin
181 0B5h | 40E8h 0100000011101000b |     LDR     r0, E
182 0B6h | 4885h 0100100010000101b |     STR     r0, ymin_in
183 0B7h |                         | 
183 0B7h | 4082h 0100000010000010b |     LDR     r0, xmax
184 0B8h | 40E8h 0100000011101000b |     LDR     r0, E
185 0B9h | 4886h 0100100010000110b |     STR     r0, xmax_in
186 0BAh |                         | 
186 0BAh | 4083h 0100000010000011b |     LDR     r0, ymax
187 0BBh | 40E8h 0100000011101000b |     LDR     r0, E
188 0BCh | 4887h 0100100010000111b |     STR     r0, ymax_in
189 0BDh |                         | 
189 0BDh |                         |     ; First check if the incoming BB coords are NULL.  If so, the NP will should
189 0BDh |                         |     ; disregard any incoming coordinates, since they are uninitialized.  It goes
189 0BDh |                         |     ; to sleep for this loop cycle.
189 0BDh |                         |       
189 0BDh | 4084h 0100000010000100b |     LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
190 0BEh | 3900h 0011100100000000b |     CMP     r0, NULL_BB
191 0BFh | 9000h 1001000000000000b |     ZEQ
192 0C0h |                         |  
192 0C0h |                         |         ; If this NP already found motion pixels itself, it needs to compare 
192 0C0h |                         |         ; the coords of its own internal bounding box to those it receives to
192 0C0h |                         |         ; create a new BB that encloses both BBs.
192 0C0h |                         | 
192 0C0h | 4080h 0100000010000000b |         LDR     r0, xmin
193 0C1h | 3900h 0011100100000000b |         CMP     r0, NULL_BB
194 0C2h | 9000h 1001000000000000b |         ZEQ
195 0C3h |                         |             ; xmin
195 0C3h |                         | 
195 0C3h | 4084h 0100000010000100b |             LDR     r0, xmin_in
196 0C4h | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
197 0C5h | 3880h 0011100010000000b |             CMP     r0, xmin        ; Compare it to this NP's value
198 0C6h | 9002h 1001000000000010b |             ZHS
199 0C7h | 4880h 0100100010000000b |                 STR     r0, xmin    ; If lower, save it as the new minimum
200 0C8h | 8240h 1000001001000000b |             WAK
201 0C9h |                         | 
201 0C9h |                         |             ; ymin
201 0C9h |                         | 
201 0C9h | 4085h 0100000010000101b |             LDR     r0, ymin_in
202 0CAh | 3881h 0011100010000001b |             CMP     r0, ymin        ; Compare it to this NP's value
203 0CBh | 9002h 1001000000000010b |             ZHS
204 0CCh | 4881h 0100100010000001b |                 STR     r0, ymin    ; If lower, save it as the new minimum
205 0CDh | 8240h 1000001001000000b |             WAK
206 0CEh |                         |                   
206 0CEh |                         |             ; xmax
206 0CEh |                         | 
206 0CEh | 4086h 0100000010000110b |             LDR     r0, xmax_in
207 0CFh | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
208 0D0h | 3882h 0011100010000010b |             CMP     r0, xmax        ; Compare it to this NP's value
209 0D1h | 9009h 1001000000001001b |             ZLS
210 0D2h | 4882h 0100100010000010b |                 STR     r0, xmax    ; If higher, save it as the new maximum
211 0D3h | 8240h 1000001001000000b |             WAK
212 0D4h |                         | 
212 0D4h |                         |             ; ymin
212 0D4h |                         |              
212 0D4h | 4087h 0100000010000111b |             LDR     r0, ymax_in
213 0D5h | 3883h 0011100010000011b |             CMP     r0, ymax        ; Compare it to this NP's value
214 0D6h | 9009h 1001000000001001b |             ZLS
215 0D7h | 4883h 0100100010000011b |                 STR     r0, ymax    ; If higher, save it as the new maximum
216 0D8h | 8240h 1000001001000000b |             WAK
217 0D9h | 8240h 1000001001000000b |         WAK  
218 0DAh |                         | 
218 0DAh |                         |         ; Next check if this NP found any motion pixels in itself.  If not, all 
218 0DAh |                         |         ; of its x/y min/max entires will be NULL/0 and it can assume the 
218 0DAh |                         |         ; incoming bounding box will enclose its own, as it has none.  So, all
218 0DAh |                         |         ; incoming values are accepted without comparison.
218 0DAh |                         |         ;
218 0DAh |                         |         ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
218 0DAh |                         |         ;       valid for them even though the code above does modify some NPs.
218 0DAh |                         | 
218 0DAh | 4080h 0100000010000000b |         LDR     r0, xmin
219 0DBh | 3900h 0011100100000000b |         CMP     r0, NULL_BB
220 0DCh | 9001h 1001000000000001b |         ZNE                     ; If NULL, use incoming coordinates always
221 0DDh | 4084h 0100000010000100b |             LDR     r0, xmin_in
222 0DEh | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
223 0DFh | 4880h 0100100010000000b |             STR     r0, xmin
224 0E0h | 4085h 0100000010000101b |             LDR     r0, ymin_in
225 0E1h | 4881h 0100100010000001b |             STR     r0, ymin
226 0E2h | 4086h 0100000010000110b |             LDR     r0, xmax_in
227 0E3h | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
228 0E4h | 4882h 0100100010000010b |             STR     r0, xmax
229 0E5h | 4087h 0100000010000111b |             LDR     r0, ymax_in
230 0E6h | 4883h 0100100010000011b |             STR     r0, ymax
231 0E7h | 8240h 1000001001000000b |         WAK
232 0E8h | 8240h 1000001001000000b |     WAK
233 0E9h |                         | 
233 0E9h |                         | CBB_COL_LOOP_CONDITION:
233 0E9h |                         | 
233 0E9h | 1701h 0001011100000001b |     SUB     r3, 1               ; Indicate an additional shift is complete
234 0EAh | CB11h 1100101100010001b |     BNZ     CBB_COL_LOOP
235 0EBh |                         |          
235 0EBh |                         | ;-------------------------------------------------------------------------------
235 0EBh |                         | 
235 0EBh |                         | FIND_BB_CENTER:
235 0EBh |                         | 
235 0EBh |                         |     ; At this point, the (0,0) NP has collected and compared all of the 
235 0EBh |                         |     ; individual NP bounding boxes and found the smallest bounding box that 
235 0EBh |                         |     ; enclosed all of them.  The tracking algorithm assumes the target is at the
235 0EBh |                         |     ; center of this bounding box, which encloses all motion in the frame.  The 
235 0EBh |                         |     ; algorithm finds the center of this box, which roughly corresponds to the 
235 0EBh |                         |     ; location of the tracked object.  In reality, it lags behind the actual
235 0EBh |                         |     ; object location since it is actually tracking motion deltas between 
235 0EBh |                         |     ; frames.
235 0EBh |                         | 
235 0EBh | 40F8h 0100000011111000b |     LDR     r0, RCR
236 0ECh | 3900h 0011100100000000b |     CMP     r0, 00h         ; Check if this is the origin NP
237 0EDh | 9001h 1001000000000001b |     ZNE                     ; Sleep all other NPs at this point.
238 0EEh |                         | 
238 0EEh |                         |         ; Restrict to writing in Z memory (to keep the code from completely 
238 0EEh |                         |         ; exploding).  Note that this will collide with the storage locations
238 0EEh |                         |         ; for x/y min/max values, but shouldn't break the code otherwise.
238 0EEh |                         | 
238 0EEh | 42C0h 0100001011000000b |         LDR     r1, coord_pointer
239 0EFh | 233Fh 0010001100111111b |         AND     r1, 00111111b       ; Extract pixel address
240 0F0h | 0380h 0000001110000000b |         ADD     r1, START_OF_Z      
241 0F1h |                         | 
241 0F1h | 4080h 0100000010000000b |         LDR     r0, xmin    ; Find the center x coordinate
242 0F2h | 0082h 0000000010000010b |         ADD     r0, xmax
243 0F3h | 8840h 1000100001000000b |         LSR     r0
244 0F4h | 48F1h 0100100011110001b |         STR     r0, [r1]    ; Save the result in z memory
245 0F5h | 0301h 0000001100000001b |         ADD     r1, 1       ; Move to next byte
246 0F6h | 4081h 0100000010000001b |         LDR     r0, ymin    ; Find the center y coordinate
247 0F7h | 0083h 0000000010000011b |         ADD     r0, ymax
248 0F8h | 8840h 1000100001000000b |         LSR     r0
249 0F9h | 48F1h 0100100011110001b |         STR     r0, [r1]    ; Save the result in z memory
250 0FAh | 0301h 0000001100000001b |         ADD     r1, 1       ; Move to next byte
251 0FBh |                         | 
251 0FBh |                         |         ;STR     r1, coord_pointer
251 0FBh | 8280h 1000001010000000b |         NOP
252 0FCh | 8240h 1000001001000000b |     WAK
253 0FDh |                         | 
253 0FDh |                         |              
253 0FDh |                         | ;-------------------------------------------------------------------------------
253 0FDh |                         |  
253 0FDh |                         | ;------------------------------------------------------------------------------- 
253 0FDh |                         | ;-------------------------------------------------------------------------------
253 0FDh |                         | 
253 0FDh |                         | DEBUG:
253 0FDh |                         |           
253 0FDh |                         | ;-------------------------------------------------------------------------------
253 0FDh |                         | 
253 0FDh |                         |     ;LDR     r0, START_OF_Y
253 0FDh |                         |     ;BL      OUTPUT_DATA_BLOCK
253 0FDh |                         |              
253 0FDh |                         |     ;LDR     r0, START_OF_Z
253 0FDh |                         |     ;BL      OUTPUT_DATA_BLOCK
253 0FDh |                         | 
253 0FDh |                         | ;-------------------------------------------------------------------------------
253 0FDh |                         | 
253 0FDh |                         | COPY_IMAGE:
253 0FDh |                         | 
253 0FDh |                         | COPY_IMAGE_INIT:
253 0FDh |                         | 
253 0FDh | 4100h 0100000100000000b |     LDR     r0, START_OF_X
254 0FEh | 4340h 0100001101000000b |     LDR     r1, START_OF_Y
255 0FFh |                         | 
255 0FFh |                         | COPY_IMAGE_LOOP:
255 0FFh |                         | 
255 0FFh | 44F0h 0100010011110000b |     LDR     r2, [r0]
256 100h | 4CF1h 0100110011110001b |     STR     r2, [r1]
257 101h | 0101h 0000000100000001b |     ADD     r0, 1
258 102h | 0301h 0000001100000001b |     ADD     r1, 1
259 103h | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
260 104h | CFF3h 1100111111110011b |     BLO     COPY_IMAGE_LOOP
261 105h |                         | 
261 105h |                         | CONVERT_TO_UNSIGNED:
261 105h |                         | 
261 105h |                         | CONVERT_TO_UNSIGNED_INIT:
261 105h |                         | 
261 105h | 4100h 0100000100000000b |     LDR     r0, START_OF_X
262 106h |                         | 
262 106h |                         | CONVERT_TO_UNSIGNED_LOOP:
262 106h |                         | 
262 106h | 42F0h 0100001011110000b |     LDR     r1, [r0]
263 107h | 8A80h 1000101010000000b |     LSL     r1          ; Max value is +255 now
264 108h | 4AF0h 0100101011110000b |     STR     r1, [r0]
265 109h | 0101h 0000000100000001b |     ADD     r0, 1
266 10Ah | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
267 10Bh | D063h 1101000001100011b |     BLO     CONVERT_TO_UNSIGNED_LOOP
268 10Ch |                         |  
268 10Ch |                         | EMBED_DATA:
268 10Ch |                         | 
268 10Ch | 40F8h 0100000011111000b |     LDR     r0, RCR
269 10Dh | 3900h 0011100100000000b |     CMP     r0, 00h         ; Check if this is the origin NP
270 10Eh | 9001h 1001000000000001b |     ZNE                     ; Sleep all other NPs at this point.
271 10Fh |                         |         
271 10Fh | 42C0h 0100001011000000b |         LDR     r1, coord_pointer
272 110h | 233Fh 0010001100111111b |         AND     r1, 00111111b       ; Extract pixel address
273 111h | 0380h 0000001110000000b |         ADD     r1, START_OF_Z      
274 112h | 4500h 0100010100000000b |         LDR     r2, START_OF_X
275 113h |                         | 
275 113h | 40F1h 0100000011110001b |         LDR     r0, [r1]    ; First coordinate stored in Z
276 114h |                         |         ; LDR     r0, 40  ; test data: center x
276 114h | 48F2h 0100100011110010b |         STR     r0, [r2]
277 115h |                         |         
277 115h |                         |         ; LDR     r0, 0       ; Clear the old X coor
277 115h |                         |         ; STR     r0, [r1]
277 115h |                         |         
277 115h | 0301h 0000001100000001b |         ADD     r1, 1       ; Move to next byte
278 116h | 0501h 0000010100000001b |         ADD     r2, 1
279 117h |                         |         
279 117h | 40F1h 0100000011110001b |         LDR     r0, [r1]    ; Second coordinate stored in Z
280 118h |                         |         ; LDR     r0, 32  ; test data: center y
280 118h | 48F2h 0100100011110010b |         STR     r0, [r2]
281 119h |                         |         
281 119h |                         |         ;LDR     r0, 0       ; Clear the old Y coor
281 119h |                         |         ;STR     r0, [r1]
281 119h |                         |     
281 119h | 8240h 1000001001000000b |     WAK
282 11Ah |                         | 
282 11Ah |                         | OUTPUT_EMBEDDED_IMAGE:
282 11Ah |                         | 
282 11Ah | 4100h 0100000100000000b |     LDR     r0, START_OF_X      ; Location of differenced image
283 11Bh | F1D0h 1111000111010000b |     BL      OUTPUT_DATA_BLOCK   ; Output the image
284 11Ch |                         | 
284 11Ch |                         | 
284 11Ch |                         | ;------------------------------------------------------------------------------- 
284 11Ch |                         | 
284 11Ch | C08Fh 1100000010001111b |     B       START
285 11Dh |                         | 
285 11Dh |                         | 
285 11Dh |                         | 
285 11Dh |                         | ;-------------------------------------------------------------------------------
285 11Dh |                         | ; OUTPUT_DATA_BLOCK
285 11Dh |                         | ;
285 11Dh |                         | ; Description:
285 11Dh |                         | ;
285 11Dh |                         | ;   The output function, which dumps 64 bytes of data out through the column
285 11Dh |                         | ;   data bus.  This can be called with different starting addresses to determine
285 11Dh |                         | ;   whether X, Y, Z or some other block is output.
285 11Dh |                         | ;
285 11Dh |                         | ; Inputs:
285 11Dh |                         | ;
285 11Dh |                         | ;   r0          The address to begin outputing.  The last byte will be output
285 11Dh |                         | ;               from address r0+63.
285 11Dh |                         | ;
285 11Dh |                         | ; Outputs:
285 11Dh |                         | ;
285 11Dh |                         | ;   -           64 bytes for each NP on column data bus.
285 11Dh |                         | ;
285 11Dh |                         | ; Registers Modified:
285 11Dh |                         | ;
285 11Dh |                         | ;   r0, r1
285 11Dh |                         | ;-------------------------------------------------------------------------------
285 11Dh |                         | 
285 11Dh |                         | OUTPUT_DATA_BLOCK:
285 11Dh |                         | 
285 11Dh | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address.
286 11Eh | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS      
287 11Fh |                         | 
287 11Fh |                         | OUTPUT_DATA_BLOCK_LOOP:
287 11Fh |                         | 
287 11Fh | A0F0h 1010000011110000b |     OUT     [r0], 0          ; Row 0
288 120h | A2F0h 1010001011110000b |     OUT     [r0], 1          ; Row 1
289 121h | A4F0h 1010010011110000b |     OUT     [r0], 2          ; Row 2
290 122h | A6F0h 1010011011110000b |     OUT     [r0], 3          ; Row 3
291 123h | A8F0h 1010100011110000b |     OUT     [r0], 4          ; Row 4
292 124h | AAF0h 1010101011110000b |     OUT     [r0], 5          ; Row 5
293 125h | ACF0h 1010110011110000b |     OUT     [r0], 6          ; Row 6
294 126h | AEF0h 1010111011110000b |     OUT     [r0], 7          ; Row 7
295 127h |                         |     
295 127h | 0101h 0000000100000001b |     ADD     r0, 1
296 128h | 38D1h 0011100011010001b |     CMP     r0, r1
297 129h | D1F1h 1101000111110001b |     BNE     OUTPUT_DATA_BLOCK_LOOP
298 12Ah | 8210h 1000001000010000b |     BX 
