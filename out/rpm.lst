  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         | ; rpm-cds.npasm
  0 000h |                         | ;
  0 000h |                         | ; Tracks an individual target across the imaging area.  It performs frame 
  0 000h |                         | ; differencing followed by a centroid-calculation to find the object 
  0 000h |                         | ; coordinates.  It assumes the object moves very little between frames.
  0 000h |                         | ;
  0 000h |                         | ; The algorithm works by first binarizing the image into a black and white 
  0 000h |                         | ; bitmap.  It then generates two histograms, one for the number of motion pixels
  0 000h |                         | ; in each column of the image and a second for each row of the image.  The total
  0 000h |                         | ; number of motion pixels in the image is calculated.  The centroid for the 
  0 000h |                         | ; columns/rows is determined by integrating the column and row histograms until 
  0 000h |                         | ; the point where half the total motion pixels have been accounted for.  This
  0 000h |                         | ; corresponds to a sort of center of mass, or centroid, of the motion.  The
  0 000h |                         | ; coordinates are saved and transmitted.
  0 000h |                         | ; 
  0 000h |                         | ; Calculates RPM based on initial coor and loops until it occurs again
  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         | 
  0 000h |                         | ; Define new instruction labels to make the code intuitive to read.
  0 000h |                         | 
  0 000h |                         | #define PXL_ROW_MASK    00111000b   ; The row bits for pixels
  0 000h |                         | #define PXL_COL_MASK    00000111b   ; The column bits for pixels
  0 000h |                         | 
  0 000h |                         | #define PXL_EDGE_N      00000000b   ; Matches pixels on N edge of NP
  0 000h |                         | #define PXL_EDGE_S      00111000b   ; Matches pixels on S edge of NP
  0 000h |                         | #define PXL_EDGE_W      00000000b   ; Matches pixels on W edge of NP
  0 000h |                         | #define PXL_EDGE_E      00000111b   ; Matches pixels on E edge of NP
  0 000h |                         |  
  0 000h |                         | #define START_OF_X      00000000b   ; Starting address of X RAM.
  0 000h |                         | #define START_OF_Y      01000000b   ; Starting address of Y RAM.
  0 000h |                         | #define START_OF_Z      10000000b   ; Starting address of Z RAM.
  0 000h |                         | #define START_OF_V      11000000b   ; Starting address of V RAM.
  0 000h |                         |  
  0 000h |                         | #define NUM_PIXELS      64          ; The number of pixels in the NP.
  0 000h |                         | #define MASK_AF         01000000b   ; Mask for ADC active flag
  0 000h |                         | #define MASK_NF         00000100b   ; Mask for negative flag
  0 000h |                         | 
  0 000h |                         | ; Algorithm constants.
  0 000h |                         | 
  0 000h |                         | #define THRESHOLD       16          ; Min frame diff. before detection
  0 000h |                         | 
  0 000h |                         | ; Algorithm variables.
  0 000h |                         |  
  0 000h |                         | #define index           r0          ; The current pixel index 0..63
  0 000h |                         | #define pxlr            r2          ; The current pixel row 0..7
  0 000h |                         | #define pxlc            r3          ; The current pixel column 0..7
  0 000h |                         |                            
  0 000h |                         | #define NULL_BB         0           ; Indicates no bounding box found
  0 000h |                         | 
  0 000h |                         | #define xmin            z[0]        ; Motion bounding box NW corner x
  0 000h |                         | #define ymin            z[1]        ; Motion bounding box NW corner y
  0 000h |                         | #define xmax            z[2]        ; Motion bounding box SE corner x
  0 000h |                         | #define ymax            z[3]        ; Motion bounding box SE corner y
  0 000h |                         |              
  0 000h |                         | #define xmin_in         z[4]        ; Motion bounding box NW corner x
  0 000h |                         | #define ymin_in         z[5]        ; Motion bounding box NW corner y
  0 000h |                         | #define xmax_in         z[6]        ; Motion bounding box SE corner x
  0 000h |                         | #define ymax_in         z[7]        ; Motion bounding box SE corner y
  0 000h |                         | 
  0 000h |                         | #define coord_pointer   v0          ; Address to save coordinate pairs
  0 000h |                         | #define rpm_pointer_x   z[16]       ; Address to save rpm original x
  0 000h |                         | #define rpm_pointer_y   z[17]       ; Address to save rpm original y
  0 000h |                         | #define rpm_count       z[18]       ; Address to save rpm count
  0 000h |                         | #define rpm_reached     z[19]       ; Address to save rpm reached
  0 000h |                         |              
  0 000h |                         | ;-------------------------------------------------------------------------------
  0 000h |                         |       
  0 000h |                         | ; Zeroes all of Z memory where the data is stored.  This isn't required,
  0 000h |                         | ; but it makes the output easier to debug.
  0 000h |                         |          
  0 000h |                         | CLEAR_HIST:
  0 000h |                         | 
  0 000h |                         | CLEAR_HIST_INIT:
  0 000h |                         | 
  0 000h | 4180h 0100000110000000b |     LDR     r0, START_OF_Z
  1 001h | 4300h 0100001100000000b |     LDR     r1, 0
  2 002h |                         | 
  2 002h |                         | CLEAR_HIST_LOOP:
  2 002h |                         | 
  2 002h | 4AF0h 0100101011110000b |     STR     r1, [r0]
  3 003h | 0101h 0000000100000001b |     ADD     r0, 1
  4 004h | 39C0h 0011100111000000b |     CMP     r0, {START_OF_Z + NUM_PIXELS}
  5 005h | C023h 1100000000100011b |     BLO     CLEAR_HIST_LOOP
  6 006h |                         |      
  6 006h |                         | INIT_COORD_PTR:
  6 006h |                         |                                           
  6 006h | 4188h 0100000110001000b |     LDR     r0, {START_OF_Z + 8} ; Store coordinates in Z, skipping min/max vars
  7 007h | 48C0h 0100100011000000b |     STR     r0, coord_pointer
  8 008h |                         | 
  8 008h |                         | ;-------------------------------------------------------------------------------
  8 008h |                         |  
  8 008h |                         | START:
  8 008h |                         |      
  8 008h |                         | ; Set the image memory to a consistent value to make it clearer when pixels are 
  8 008h |                         | ; not triggering properly.
  8 008h |                         |                                           
  8 008h |                         | CLEAN_SLATE_INIT:
  8 008h |                         |  
  8 008h | 4100h 0100000100000000b |     LDR     r0, START_OF_X  ; Overwrite x ram with constant (note this is in gray code)
  9 009h | 4500h 0100010100000000b |     LDR     r2, 00h      
 10 00Ah | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address
 11 00Bh | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS 
 12 00Ch |                         | 
 12 00Ch |                         | CLEAN_SLATE_LOOP:
 12 00Ch |                         | 
 12 00Ch | 4CF0h 0100110011110000b |     STR     r2, [r0]
 13 00Dh | 0101h 0000000100000001b |     ADD     r0, 1
 14 00Eh | 38D1h 0011100011010001b |     CMP     r0, r1
 15 00Fh | C0C3h 1100000011000011b |     BLO     CLEAN_SLATE_LOOP
 16 010h |                         | 
 16 010h |                         | ACQUIRE_IMAGE_RESET:
 16 010h |                         | 
 16 010h | 8220h 1000001000100000b |     IMG                     ; Acquire a new image from the ADCs with 0 t_int
 17 011h |                         | 
 17 011h |                         | WAIT_FOR_ADC_RESET:
 17 011h |                         | 
 17 011h | 40F4h 0100000011110100b |     LDR     r0, SR             ; Load the status register
 18 012h | 2140h 0010000101000000b |     AND     r0, MASK_AF        ; Check if the ADC is active
 19 013h | C111h 1100000100010001b |     BNZ     WAIT_FOR_ADC_RESET ; Loop while the ADC is converting
 20 014h |                         | 
 20 014h |                         | MOVE_TO_Z_INIT:
 20 014h |                         | 	
 20 014h | 4300h 0100001100000000b |     LDR     r1, START_OF_X
 21 015h | 4580h 0100010110000000b |     LDR     r2, START_OF_Z
 22 016h |                         | 
 22 016h |                         | MOVE_TO_Z:
 22 016h |                         | 
 22 016h | 40F1h 0100000011110001b |     LDR     r0, [r1]
 23 017h | 8820h 1000100000100000b |     GTB     r0
 24 018h | 48F2h 0100100011110010b |     STR     r0, [r2]
 25 019h | 0301h 0000001100000001b |     ADD     r1, 1
 26 01Ah | 0501h 0000010100000001b |     ADD     r2, 1
 27 01Bh | 3B40h 0011101101000000b |     CMP     r1, NUM_PIXELS
 28 01Ch | C161h 1100000101100001b |     BNE     MOVE_TO_Z
 29 01Dh |                         |      
 29 01Dh |                         | ACQUIRE_IMAGE:
 29 01Dh |                         | 
 29 01Dh | 8220h 1000001000100000b |     IMG                     ; Acquire a new image from the ADCs with real t_int
 30 01Eh |                         | 
 30 01Eh |                         | WAIT_FOR_ADC:
 30 01Eh |                         | 
 30 01Eh |                         |     ; At this point, the FSM for the ADC is running.  Read the status register
 30 01Eh |                         |     ; to check if the conversion is finished. (Note: very inefficient)
 30 01Eh |                         |     ; Can be done after reading out to operate on last packet's data
 30 01Eh |                         | 
 30 01Eh | 40F4h 0100000011110100b |     LDR     r0, SR          ; Load the status register
 31 01Fh | 2140h 0010000101000000b |     AND     r0, MASK_AF     ; Check if the ADC is active
 32 020h | C1E1h 1100000111100001b |     BNZ     WAIT_FOR_ADC    ; Loop while the ADC is converting
 33 021h |                         | 
 33 021h |                         | DIFFERENCE_INIT:
 33 021h |                         |     
 33 021h | 4300h 0100001100000000b |     LDR     r1, START_OF_X
 34 022h | 4580h 0100010110000000b |     LDR     r2, START_OF_Z
 35 023h |                         | 
 35 023h |                         | DIFFERENCE:
 35 023h |                         | 
 35 023h | 40F1h 0100000011110001b |     LDR     r0, [r1]
 36 024h | 8820h 1000100000100000b |     GTB     r0
 37 025h | 010Eh 0000000100001110b |     ADD     r0, 14
 38 026h | 10F2h 0001000011110010b |     SUB     r0, [r2]
 39 027h | 48F1h 0100100011110001b |     STR     r0, [r1]
 40 028h | 0301h 0000001100000001b |     ADD     r1, 1
 41 029h | 0501h 0000010100000001b |     ADD     r2, 1
 42 02Ah | 3B40h 0011101101000000b |     CMP     r1, NUM_PIXELS
 43 02Bh | C231h 1100001000110001b |     BNE     DIFFERENCE 
 44 02Ch |                         |      
 44 02Ch |                         | OUTPUT_ORIGINAL_IMAGE:
 44 02Ch |                         | 
 44 02Ch | 4100h 0100000100000000b |     LDR     r0, START_OF_X      ; Location of differenced image
 45 02Dh | F200h 1111001000000000b |     BL      OUTPUT_DATA_BLOCK   ; Output the image
 46 02Eh |                         | 
 46 02Eh |                         | ;OUTPUT_BLANK_IMAGE:
 46 02Eh |                         | ;
 46 02Eh |                         | ;    LDR     r0, START_OF_Z      ; Location of blank image
 46 02Eh |                         | ;    BL      OUTPUT_DATA_BLOCK   ; Output the image
 46 02Eh |                         | 
 46 02Eh |                         | CLEAN_SLATE_INIT_Z:
 46 02Eh |                         |  
 46 02Eh | 4180h 0100000110000000b |     LDR     r0, START_OF_Z  ; Overwrite z ram with constant (note this is in gray code)
 47 02Fh | 4500h 0100010100000000b |     LDR     r2, 00h      
 48 030h | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address
 49 031h | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS 
 50 032h |                         | 
 50 032h |                         | CLEAN_SLATE_LOOP_Z:
 50 032h |                         | 
 50 032h | 4CF0h 0100110011110000b |     STR     r2, [r0]
 51 033h | 0101h 0000000100000001b |     ADD     r0, 1
 52 034h | 38D1h 0011100011010001b |     CMP     r0, r1
 53 035h | C323h 1100001100100011b |     BLO     CLEAN_SLATE_LOOP_Z
 54 036h |                         | 
 54 036h |                         | CONVERT_TO_SIGNED:
 54 036h |                         | 
 54 036h |                         | CONVERT_TO_SIGNED_INIT:
 54 036h |                         | 
 54 036h | 4100h 0100000100000000b |     LDR     r0, START_OF_X
 55 037h |                         | 
 55 037h |                         | CONVERT_TO_SIGNED_LOOP:
 55 037h |                         | 
 55 037h | 42F0h 0100001011110000b |     LDR     r1, [r0]
 56 038h | 8A40h 1000101001000000b |     LSR     r1          ; Max value is +127 now
 57 039h | 4AF0h 0100101011110000b |     STR     r1, [r0]
 58 03Ah | 0101h 0000000100000001b |     ADD     r0, 1
 59 03Bh | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
 60 03Ch | C373h 1100001101110011b |     BLO     CONVERT_TO_SIGNED_LOOP
 61 03Dh |                         |  
 61 03Dh |                         | ;-------------------------------------------------------------------------------
 61 03Dh |                         |  
 61 03Dh |                         | ; Iterate through every pixel in the new image (in X) and subtract the old, 
 61 03Dh |                         | ; previous image (in Y).  The math here is signed since differences can be 
 61 03Dh |                         | ; positive or negative.  Because of this, images are always divided by a factor 
 61 03Dh |                         | ; of two in order to prevent overflow during math operations.  The previous 
 61 03Dh |                         | ; frame is stored in this signed representation as well.
 61 03Dh |                         |  
 61 03Dh |                         | FRAME_DIFFERENCE:
 61 03Dh |                         | 
 61 03Dh |                         | FD_LOOP_INIT:
 61 03Dh |                         |  
 61 03Dh |                         |     ; Store bounding box coordinates for this NP in V memory.
 61 03Dh |                         | 
 61 03Dh | 4100h 0100000100000000b |     LDR r0, 0           ; Clear coordinates, 0 is reserved for NULL
 62 03Eh | 4880h 0100100010000000b |     STR r0, xmin
 63 03Fh | 4881h 0100100010000001b |     STR r0, ymin
 64 040h | 4882h 0100100010000010b |     STR r0, xmax
 65 041h | 4883h 0100100010000011b |     STR r0, ymax
 66 042h |                         |                                          
 66 042h | 4100h 0100000100000000b |     LDR index, START_OF_X      ; Initialize index variables
 67 043h |                         |                           
 67 043h |                         | FD_LOOP:
 67 043h |                         | 
 67 043h | 46D0h 0100011011010000b |     LDR     pxlc, index         ; Update row/column variables
 68 044h | 2707h 0010011100000111b |     AND     pxlc, PXL_COL_MASK
 69 045h | 0701h 0000011100000001b |     ADD     pxlc, 1             ; C/R numbered from 1-8 since 0 is NULL
 70 046h | 44D0h 0100010011010000b |     LDR     pxlr, index
 71 047h | 8C40h 1000110001000000b |     LSR     pxlr
 72 048h | 8C40h 1000110001000000b |     LSR     pxlr
 73 049h | 8C40h 1000110001000000b |     LSR     pxlr
 74 04Ah | 0501h 0000010100000001b |     ADD     pxlr, 1             ; C/R numbered from 1-8 since 0 is NULL
 75 04Bh |                         | 
 75 04Bh | 42F0h 0100001011110000b |     LDR     r1, [r0]        ; Load the new pixel value
 76 04Ch | 0140h 0000000101000000b |     ADD     r0, START_OF_Y  ; Find correspond Y pixel
 77 04Dh | 12F0h 0001001011110000b |     SUB     r1, [r0]        ; signed(new) - signed(old)
 78 04Eh | 9005h 1001000000000101b |     ZPL                     ; If negative, negate to find absolute value
 79 04Fh | 33FFh 0011001111111111b |         EOR     r1, FFh     ; For two's compliment, xor(x, FFh)+1 = -x
 80 050h | 0301h 0000001100000001b |         ADD     r1, 1
 81 051h | 8240h 1000001001000000b |     WAK
 82 052h | 3B10h 0011101100010000b |     CMP     r1, THRESHOLD   ; Binarize image based on threshold
 83 053h | 9003h 1001000000000011b |     ZLO
 84 054h | 43FFh 0100001111111111b |         LDR     r1, 255     ; This makes it easier to debug, but is not req'd
 85 055h | 4AF0h 0100101011110000b |         STR     r1, [r0]
 86 056h | 4280h 0100001010000000b |         LDR     r1, xmin    ; Check if x/y min/max variables are NULL
 87 057h | 3B00h 0011101100000000b |         CMP     r1, 0    
 88 058h | 9001h 1001000000000001b |         ZNE                         ; NPs where this is the 1st detection, so
 89 059h | 4E80h 0100111010000000b |             STR     pxlc, xmin      ;   this pixel is the min and max
 90 05Ah | 4C81h 0100110010000001b |             STR     pxlr, ymin
 91 05Bh | 4E82h 0100111010000010b |             STR     pxlc, xmax
 92 05Ch | 4C83h 0100110010000011b |             STR     pxlr, ymax
 93 05Dh | 8240h 1000001001000000b |         WAK
 94 05Eh | 9000h 1001000000000000b |         ZEQ                         ; Execute if current values are valid
 95 05Fh | 3E80h 0011111010000000b |             CMP     pxlc, xmin      ; Is this the min x encountered?
 96 060h | 900Ah 1001000000001010b |             ZGE
 97 061h | 4E80h 0100111010000000b |                 STR     pxlc, xmin
 98 062h | 8240h 1000001001000000b |             WAK
 99 063h | 3C81h 0011110010000001b |             CMP     pxlr, ymin      ; Is this the min y encountered?
100 064h | 900Ah 1001000000001010b |             ZGE
101 065h | 4C81h 0100110010000001b |                 STR     pxlr, ymin
102 066h | 8240h 1000001001000000b |             WAK
103 067h | 3E82h 0011111010000010b |             CMP     pxlc, xmax      ; Is this the max x encountered?
104 068h | 900Dh 1001000000001101b |             ZLE
105 069h | 4E82h 0100111010000010b |                 STR     pxlc, xmax
106 06Ah | 8240h 1000001001000000b |             WAK
107 06Bh | 3C83h 0011110010000011b |             CMP     pxlr, ymax      ; Is this the max y encountered?
108 06Ch | 900Dh 1001000000001101b |             ZLE
109 06Dh | 4C83h 0100110010000011b |                 STR     pxlr, ymax
110 06Eh | 8240h 1000001001000000b |             WAK
111 06Fh | 8240h 1000001001000000b |         WAK
112 070h | 8240h 1000001001000000b |     WAK
113 071h |                         | 
113 071h |                         | FD_LOOP_UPDATE:
113 071h |                         | 
113 071h | 01C1h 0000000111000001b |     ADD     r0, {1 - START_OF_Y}  ; Return to the next pixel in X RAM
114 072h | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
115 073h | C43Bh 1100010000111011b |     BLT     FD_LOOP
116 074h |                         |                          
116 074h |                         | ;-------------------------------------------------------------------------------
116 074h |                         | 
116 074h |                         | COMBINE_BOUNDING_BOXES:
116 074h |                         |      
116 074h |                         | CBB_ROW:
116 074h |                         | 
116 074h |                         | CBB_ROW_INIT:
116 074h |                         | 
116 074h | 4707h 0100011100000111b |     LDR     r3, 7       ; Number of shifts to perform, #ROWS-1
117 075h |                         | 
117 075h |                         | CBB_ROW_LOOP:
117 075h |                         | 
117 075h |                         |     ; When combining bounding boxes, several cases may occur:
117 075h |                         |     ;
117 075h |                         |     ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
117 075h |                         |     ;       this case, the coordinate pairs should remain NULL
117 075h |                         |     ;
117 075h |                         |     ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
117 075h |                         |     ;       case, the incoming coordinate pairs should overwrite the local ones.
117 075h |                         |     ;
117 075h |                         |     ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
117 075h |                         |     ;       the coordinate pairs should not be modified.
117 075h |                         |     ;
117 075h |                         |     ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
117 075h |                         |     ;       coordinate pair must be compared and the more inclusive one saved.
117 075h |                         |     ;
117 075h |                         |     ; NOTE: When an NP is asleep, it will not write any data to memory or 
117 075h |                         |     ;       registers, so any data that needs to be access from a sleeping
117 075h |                         |     ;       NP through the NSWE data bus must already be loaded in r0..r3.
117 075h |                         | 
117 075h |                         |     ; Copy incoming coordinates locally to prevent NPs from receiving 
117 075h |                         |     ; out-of-sync data.
117 075h |                         | 
117 075h | 4080h 0100000010000000b |     LDR     r0, xmin
118 076h | 40E2h 0100000011100010b |     LDR     r0, S
119 077h | 4884h 0100100010000100b |     STR     r0, xmin_in
120 078h |                         | 
120 078h | 4081h 0100000010000001b |     LDR     r0, ymin
121 079h | 40E2h 0100000011100010b |     LDR     r0, S
122 07Ah | 4885h 0100100010000101b |     STR     r0, ymin_in
123 07Bh |                         | 
123 07Bh | 4082h 0100000010000010b |     LDR     r0, xmax
124 07Ch | 40E2h 0100000011100010b |     LDR     r0, S
125 07Dh | 4886h 0100100010000110b |     STR     r0, xmax_in
126 07Eh |                         | 
126 07Eh | 4083h 0100000010000011b |     LDR     r0, ymax
127 07Fh | 40E2h 0100000011100010b |     LDR     r0, S
128 080h | 4887h 0100100010000111b |     STR     r0, ymax_in
129 081h |                         | 
129 081h |                         |     ; First check if the incoming BB coords are NULL.  If so, the NP will should
129 081h |                         |     ; disregard any incoming coordinates, since they are uninitialized.  It goes
129 081h |                         |     ; to sleep for this loop cycle.
129 081h |                         |       
129 081h | 4084h 0100000010000100b |     LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
130 082h | 3900h 0011100100000000b |     CMP     r0, NULL_BB
131 083h | 9000h 1001000000000000b |     ZEQ
132 084h |                         |  
132 084h |                         |         ; If this NP already found motion pixels itself, it needs to compare 
132 084h |                         |         ; the coords of its own internal bounding box to those it receives to
132 084h |                         |         ; create a new BB that encloses both BBs.
132 084h |                         | 
132 084h | 4080h 0100000010000000b |         LDR     r0, xmin
133 085h | 3900h 0011100100000000b |         CMP     r0, NULL_BB
134 086h | 9000h 1001000000000000b |         ZEQ
135 087h |                         |             ; xmin
135 087h |                         | 
135 087h | 4084h 0100000010000100b |             LDR     r0, xmin_in
136 088h | 3880h 0011100010000000b |             CMP     r0, xmin        ; Compare it to this NP's value
137 089h | 9002h 1001000000000010b |             ZHS
138 08Ah | 4880h 0100100010000000b |                 STR     r0, xmin    ; If lower, save it as the new minimum
139 08Bh | 8240h 1000001001000000b |             WAK
140 08Ch |                         | 
140 08Ch |                         |             ; ymin
140 08Ch |                         | 
140 08Ch | 4085h 0100000010000101b |             LDR     r0, ymin_in
141 08Dh | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
142 08Eh | 3881h 0011100010000001b |             CMP     r0, ymin        ; Compare it to this NP's value
143 08Fh | 9002h 1001000000000010b |             ZHS
144 090h | 4881h 0100100010000001b |                 STR     r0, ymin    ; If lower, save it as the new minimum
145 091h | 8240h 1000001001000000b |             WAK
146 092h |                         |                   
146 092h |                         |             ; xmax
146 092h |                         | 
146 092h | 4086h 0100000010000110b |             LDR     r0, xmax_in
147 093h | 3882h 0011100010000010b |             CMP     r0, xmax        ; Compare it to this NP's value
148 094h | 9009h 1001000000001001b |             ZLS
149 095h | 4882h 0100100010000010b |                 STR     r0, xmax    ; If higher, save it as the new maximum
150 096h | 8240h 1000001001000000b |             WAK
151 097h |                         | 
151 097h |                         |             ; ymin
151 097h |                         |              
151 097h | 4087h 0100000010000111b |             LDR     r0, ymax_in
152 098h | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since S NP starts 8 rows higher
153 099h | 3883h 0011100010000011b |             CMP     r0, ymax        ; Compare it to this NP's value
154 09Ah | 9009h 1001000000001001b |             ZLS
155 09Bh | 4883h 0100100010000011b |                 STR     r0, ymax    ; If higher, save it as the new maximum
156 09Ch | 8240h 1000001001000000b |             WAK
157 09Dh | 8240h 1000001001000000b |         WAK  
158 09Eh |                         | 
158 09Eh |                         |         ; Next check if this NP found any motion pixels in itself.  If not, all 
158 09Eh |                         |         ; of its x/y min/max entires will be NULL/0 and it can assume the 
158 09Eh |                         |         ; incoming bounding box will enclose its own, as it has none.  So, all
158 09Eh |                         |         ; incoming values are accepted without comparison.
158 09Eh |                         |         ;
158 09Eh |                         |         ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
158 09Eh |                         |         ;       valid for them even though the code above does modify some NPs.
158 09Eh |                         | 
158 09Eh | 4080h 0100000010000000b |         LDR     r0, xmin
159 09Fh | 3900h 0011100100000000b |         CMP     r0, NULL_BB
160 0A0h | 9001h 1001000000000001b |         ZNE                     ; If NULL, use incoming coordinates always
161 0A1h | 4084h 0100000010000100b |             LDR     r0, xmin_in
162 0A2h | 4880h 0100100010000000b |             STR     r0, xmin
163 0A3h | 4085h 0100000010000101b |             LDR     r0, ymin_in
164 0A4h | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
165 0A5h | 4881h 0100100010000001b |             STR     r0, ymin
166 0A6h | 4086h 0100000010000110b |             LDR     r0, xmax_in
167 0A7h | 4882h 0100100010000010b |             STR     r0, xmax
168 0A8h | 4087h 0100000010000111b |             LDR     r0, ymax_in
169 0A9h | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since S NP starts 8 rows higher
170 0AAh | 4883h 0100100010000011b |             STR     r0, ymax
171 0ABh | 8240h 1000001001000000b |         WAK
172 0ACh | 8240h 1000001001000000b |     WAK
173 0ADh |                         | 
173 0ADh |                         | CBB_ROW_LOOP_CONDITION:
173 0ADh |                         | 
173 0ADh | 1701h 0001011100000001b |     SUB     r3, 1               ; Indicate an additional shift is complete
174 0AEh | C751h 1100011101010001b |     BNZ     CBB_ROW_LOOP
175 0AFh |                         | 
175 0AFh |                         | ;-------------------------------------------------------------------------------
175 0AFh |                         |       
175 0AFh |                         | CBB_COL:
175 0AFh |                         | 
175 0AFh |                         | CBB_COL_INIT:
175 0AFh |                         | 
175 0AFh | 4709h 0100011100001001b |     LDR     r3, 9       ; Number of shifts to perform, #COLS-1
176 0B0h |                         | 
176 0B0h |                         | CBB_COL_LOOP:
176 0B0h |                         | 
176 0B0h |                         |     ; When combining bounding boxes, several cases may occur:
176 0B0h |                         |     ;
176 0B0h |                         |     ;   1.  Both this NP and the one downstream have NULL coordinate pairs.  In
176 0B0h |                         |     ;       this case, the coordinate pairs should remain NULL
176 0B0h |                         |     ;
176 0B0h |                         |     ;   2.  This NP has NULL data, but the upstream NP has valid data.  In this
176 0B0h |                         |     ;       case, the incoming coordinate pairs should overwrite the local ones.
176 0B0h |                         |     ;
176 0B0h |                         |     ;   3.  This NP has valid data, but the upstream NP does not.  In this case,
176 0B0h |                         |     ;       the coordinate pairs should not be modified.
176 0B0h |                         |     ;
176 0B0h |                         |     ;   4.  Both this NP and the downstream NP have valid coordinate data.  Each
176 0B0h |                         |     ;       coordinate pair must be compared and the more inclusive one saved.
176 0B0h |                         |     ;
176 0B0h |                         |     ; NOTE: When an NP is asleep, it will not write any data to memory or 
176 0B0h |                         |     ;       registers, so any data that needs to be access from a sleeping
176 0B0h |                         |     ;       NP through the NSWE data bus must already be loaded in r0..r3.
176 0B0h |                         | 
176 0B0h |                         |     ; Copy incoming coordinates locally to prevent NPs from receiving 
176 0B0h |                         |     ; out-of-sync data.
176 0B0h |                         | 
176 0B0h | 4080h 0100000010000000b |     LDR     r0, xmin
177 0B1h | 40E8h 0100000011101000b |     LDR     r0, E
178 0B2h | 4884h 0100100010000100b |     STR     r0, xmin_in
179 0B3h |                         | 
179 0B3h | 4081h 0100000010000001b |     LDR     r0, ymin
180 0B4h | 40E8h 0100000011101000b |     LDR     r0, E
181 0B5h | 4885h 0100100010000101b |     STR     r0, ymin_in
182 0B6h |                         | 
182 0B6h | 4082h 0100000010000010b |     LDR     r0, xmax
183 0B7h | 40E8h 0100000011101000b |     LDR     r0, E
184 0B8h | 4886h 0100100010000110b |     STR     r0, xmax_in
185 0B9h |                         | 
185 0B9h | 4083h 0100000010000011b |     LDR     r0, ymax
186 0BAh | 40E8h 0100000011101000b |     LDR     r0, E
187 0BBh | 4887h 0100100010000111b |     STR     r0, ymax_in
188 0BCh |                         | 
188 0BCh |                         |     ; First check if the incoming BB coords are NULL.  If so, the NP will should
188 0BCh |                         |     ; disregard any incoming coordinates, since they are uninitialized.  It goes
188 0BCh |                         |     ; to sleep for this loop cycle.
188 0BCh |                         |       
188 0BCh | 4084h 0100000010000100b |     LDR     r0, xmin_in     ; Check if the coords are NULL in the other NP    
189 0BDh | 3900h 0011100100000000b |     CMP     r0, NULL_BB
190 0BEh | 9000h 1001000000000000b |     ZEQ
191 0BFh |                         |  
191 0BFh |                         |         ; If this NP already found motion pixels itself, it needs to compare 
191 0BFh |                         |         ; the coords of its own internal bounding box to those it receives to
191 0BFh |                         |         ; create a new BB that encloses both BBs.
191 0BFh |                         | 
191 0BFh | 4080h 0100000010000000b |         LDR     r0, xmin
192 0C0h | 3900h 0011100100000000b |         CMP     r0, NULL_BB
193 0C1h | 9000h 1001000000000000b |         ZEQ
194 0C2h |                         |             ; xmin
194 0C2h |                         | 
194 0C2h | 4084h 0100000010000100b |             LDR     r0, xmin_in
195 0C3h | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
196 0C4h | 3880h 0011100010000000b |             CMP     r0, xmin        ; Compare it to this NP's value
197 0C5h | 9002h 1001000000000010b |             ZHS
198 0C6h | 4880h 0100100010000000b |                 STR     r0, xmin    ; If lower, save it as the new minimum
199 0C7h | 8240h 1000001001000000b |             WAK
200 0C8h |                         | 
200 0C8h |                         |             ; ymin
200 0C8h |                         | 
200 0C8h | 4085h 0100000010000101b |             LDR     r0, ymin_in
201 0C9h | 3881h 0011100010000001b |             CMP     r0, ymin        ; Compare it to this NP's value
202 0CAh | 9002h 1001000000000010b |             ZHS
203 0CBh | 4881h 0100100010000001b |                 STR     r0, ymin    ; If lower, save it as the new minimum
204 0CCh | 8240h 1000001001000000b |             WAK
205 0CDh |                         |                   
205 0CDh |                         |             ; xmax
205 0CDh |                         | 
205 0CDh | 4086h 0100000010000110b |             LDR     r0, xmax_in
206 0CEh | 0108h 0000000100001000b |             ADD     r0, 8           ; Add offset since E NP starts 8 cols higher
207 0CFh | 3882h 0011100010000010b |             CMP     r0, xmax        ; Compare it to this NP's value
208 0D0h | 9009h 1001000000001001b |             ZLS
209 0D1h | 4882h 0100100010000010b |                 STR     r0, xmax    ; If higher, save it as the new maximum
210 0D2h | 8240h 1000001001000000b |             WAK
211 0D3h |                         | 
211 0D3h |                         |             ; ymin
211 0D3h |                         |              
211 0D3h | 4087h 0100000010000111b |             LDR     r0, ymax_in
212 0D4h | 3883h 0011100010000011b |             CMP     r0, ymax        ; Compare it to this NP's value
213 0D5h | 9009h 1001000000001001b |             ZLS
214 0D6h | 4883h 0100100010000011b |                 STR     r0, ymax    ; If higher, save it as the new maximum
215 0D7h | 8240h 1000001001000000b |             WAK
216 0D8h | 8240h 1000001001000000b |         WAK  
217 0D9h |                         | 
217 0D9h |                         |         ; Next check if this NP found any motion pixels in itself.  If not, all 
217 0D9h |                         |         ; of its x/y min/max entires will be NULL/0 and it can assume the 
217 0D9h |                         |         ; incoming bounding box will enclose its own, as it has none.  So, all
217 0D9h |                         |         ; incoming values are accepted without comparison.
217 0D9h |                         |         ;
217 0D9h |                         |         ; NOTE: Since NPs with NULL values where asleep before, this CMP is 
217 0D9h |                         |         ;       valid for them even though the code above does modify some NPs.
217 0D9h |                         | 
217 0D9h | 4080h 0100000010000000b |         LDR     r0, xmin
218 0DAh | 3900h 0011100100000000b |         CMP     r0, NULL_BB
219 0DBh | 9001h 1001000000000001b |         ZNE                     ; If NULL, use incoming coordinates always
220 0DCh | 4084h 0100000010000100b |             LDR     r0, xmin_in
221 0DDh | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
222 0DEh | 4880h 0100100010000000b |             STR     r0, xmin
223 0DFh | 4085h 0100000010000101b |             LDR     r0, ymin_in
224 0E0h | 4881h 0100100010000001b |             STR     r0, ymin
225 0E1h | 4086h 0100000010000110b |             LDR     r0, xmax_in
226 0E2h | 0108h 0000000100001000b |             ADD     r0, 8       ; Add offset since E NP starts 8 cols higher
227 0E3h | 4882h 0100100010000010b |             STR     r0, xmax
228 0E4h | 4087h 0100000010000111b |             LDR     r0, ymax_in
229 0E5h | 4883h 0100100010000011b |             STR     r0, ymax
230 0E6h | 8240h 1000001001000000b |         WAK
231 0E7h | 8240h 1000001001000000b |     WAK
232 0E8h |                         | 
232 0E8h |                         | CBB_COL_LOOP_CONDITION:
232 0E8h |                         | 
232 0E8h | 1701h 0001011100000001b |     SUB     r3, 1               ; Indicate an additional shift is complete
233 0E9h | CB01h 1100101100000001b |     BNZ     CBB_COL_LOOP
234 0EAh |                         |          
234 0EAh |                         | ;-------------------------------------------------------------------------------
234 0EAh |                         | 
234 0EAh |                         | FIND_BB_CENTER:
234 0EAh |                         | 
234 0EAh |                         |     ; At this point, the (0,0) NP has collected and compared all of the 
234 0EAh |                         |     ; individual NP bounding boxes and found the smallest bounding box that 
234 0EAh |                         |     ; enclosed all of them.  The tracking algorithm assumes the target is at the
234 0EAh |                         |     ; center of this bounding box, which encloses all motion in the frame.  The 
234 0EAh |                         |     ; algorithm finds the center of this box, which roughly corresponds to the 
234 0EAh |                         |     ; location of the tracked object.  In reality, it lags behind the actual
234 0EAh |                         |     ; object location since it is actually tracking motion deltas between 
234 0EAh |                         |     ; frames.
234 0EAh |                         | 
234 0EAh | 40F8h 0100000011111000b |     LDR     r0, RCR
235 0EBh | 3900h 0011100100000000b |     CMP     r0, 00h         ; Check if this is the origin NP
236 0ECh | 9001h 1001000000000001b |     ZNE                     ; Sleep all other NPs at this point.
237 0EDh |                         | 
237 0EDh |                         |         ; Restrict to writing in Z memory (to keep the code from completely 
237 0EDh |                         |         ; exploding).  Note that this will collide with the storage locations
237 0EDh |                         |         ; for x/y min/max values, but shouldn't break the code otherwise.
237 0EDh |                         | 
237 0EDh | 42C0h 0100001011000000b |         LDR     r1, coord_pointer
238 0EEh | 233Fh 0010001100111111b |         AND     r1, 00111111b       ; Extract pixel address
239 0EFh | 0380h 0000001110000000b |         ADD     r1, START_OF_Z      
240 0F0h |                         | 
240 0F0h | 4080h 0100000010000000b |         LDR     r0, xmin    ; Find the center x coordinate
241 0F1h | 0082h 0000000010000010b |         ADD     r0, xmax
242 0F2h | 8840h 1000100001000000b |         LSR     r0
243 0F3h | 48F1h 0100100011110001b |         STR     r0, [r1]    ; Save the result in z memory
244 0F4h | 0301h 0000001100000001b |         ADD     r1, 1       ; Move to next byte
245 0F5h | 4081h 0100000010000001b |         LDR     r0, ymin    ; Find the center y coordinate
246 0F6h | 0083h 0000000010000011b |         ADD     r0, ymax
247 0F7h | 8840h 1000100001000000b |         LSR     r0
248 0F8h | 48F1h 0100100011110001b |         STR     r0, [r1]    ; Save the result in z memory
249 0F9h | 1301h 0001001100000001b |         SUB     r1, 1       ; move back to X byte
250 0FAh |                         | 
250 0FAh |                         | RPM_INIT:
250 0FAh |                         | 
250 0FAh | 4093h 0100000010010011b |         LDR     r0, [rpm_reached]
251 0FBh | 3901h 0011100100000001b |         CMP     r0, 1               ; Check if RPM has made a full cycle
252 0FCh | D081h 1101000010000001b |         BNE     RPM_INIT_CONT
253 0FDh | 4100h 0100000100000000b |         LDR     r0, 0
254 0FEh | 4893h 0100100010010011b |         STR     r0, rpm_reached     ; Reset RPM reached
255 0FFh | 40F1h 0100000011110001b |         LDR     r0, [r1]
256 100h | 4890h 0100100010010000b |         STR     r0, rpm_pointer_x   ; Store X to RPM X
257 101h | 0301h 0000001100000001b |         ADD     r1, 1
258 102h | 40F1h 0100000011110001b |         LDR     r0, [r1]
259 103h | 4891h 0100100010010001b |         STR     r0, rpm_pointer_y   ; Store Y to RPM Y
260 104h | 1301h 0001001100000001b |         SUB     r1, 1
261 105h |                         |         ;LDR     r0, 0
261 105h |                         |         ;STR     r0, rpm_count       ; Reset count
261 105h | 8280h 1000001010000000b |         NOP
262 106h | 8280h 1000001010000000b |         NOP
263 107h | D14Fh 1101000101001111b |         B       FIND_BB_CENTER_CONT ; Don't run next block, object hasn't moved
264 108h |                         | 
264 108h |                         | RPM_INIT_CONT:
264 108h |                         | 
264 108h |                         |         ; increment count
264 108h | 4092h 0100000010010010b |         LDR     r0, [rpm_count]
265 109h | 0101h 0000000100000001b |         ADD     r0, 1
266 10Ah | 4892h 0100100010010010b |         STR     r0, rpm_count
267 10Bh |                         |         ; save the initial point or count
267 10Bh | 4490h 0100010010010000b |         LDR     r2, [rpm_pointer_x]
268 10Ch | 3CF1h 0011110011110001b |         CMP     r2, [r1]
269 10Dh | D141h 1101000101000001b |         BNE     FIND_BB_CENTER_CONT
270 10Eh | 0301h 0000001100000001b |         ADD     r1, 1
271 10Fh | 4491h 0100010010010001b |         LDR     r2, [rpm_pointer_y]
272 110h | 3CF1h 0011110011110001b |         CMP     r2, [r1]
273 111h | D141h 1101000101000001b |         BNE     FIND_BB_CENTER_CONT
274 112h | 4101h 0100000100000001b |         LDR     r0, 1
275 113h | 4893h 0100100010010011b |         STR     r0, rpm_reached
276 114h |                         | 
276 114h |                         | FIND_BB_CENTER_CONT:
276 114h |                         | 
276 114h | 8240h 1000001001000000b |     WAK
277 115h |                         | 
277 115h |                         | ;-------------------------------------------------------------------------------
277 115h |                         |  
277 115h |                         | ;------------------------------------------------------------------------------- 
277 115h |                         | ;-------------------------------------------------------------------------------
277 115h |                         | 
277 115h |                         | DEBUG:
277 115h |                         |           
277 115h |                         | ;-------------------------------------------------------------------------------
277 115h |                         | 
277 115h |                         |     ;LDR     r0, START_OF_Y
277 115h |                         |     ;BL      OUTPUT_DATA_BLOCK
277 115h |                         |              
277 115h | 4180h 0100000110000000b |     LDR     r0, START_OF_Z
278 116h | F200h 1111001000000000b |     BL      OUTPUT_DATA_BLOCK
279 117h |                         | 
279 117h |                         | ;-------------------------------------------------------------------------------
279 117h |                         | 
279 117h |                         | COPY_IMAGE:
279 117h |                         | 
279 117h |                         | COPY_IMAGE_INIT:
279 117h |                         | 
279 117h | 4100h 0100000100000000b |     LDR     r0, START_OF_X
280 118h | 4340h 0100001101000000b |     LDR     r1, START_OF_Y
281 119h |                         | 
281 119h |                         | COPY_IMAGE_LOOP:
281 119h |                         | 
281 119h | 44F0h 0100010011110000b |     LDR     r2, [r0]
282 11Ah | 4CF1h 0100110011110001b |     STR     r2, [r1]
283 11Bh | 0101h 0000000100000001b |     ADD     r0, 1
284 11Ch | 0301h 0000001100000001b |     ADD     r1, 1
285 11Dh | 3940h 0011100101000000b |     CMP     r0, NUM_PIXELS
286 11Eh | D193h 1101000110010011b |     BLO     COPY_IMAGE_LOOP
287 11Fh |                         | 
287 11Fh |                         | ;------------------------------------------------------------------------------- 
287 11Fh |                         | 
287 11Fh | C08Fh 1100000010001111b |     B       START
288 120h |                         | 
288 120h |                         | 
288 120h |                         | 
288 120h |                         | ;-------------------------------------------------------------------------------
288 120h |                         | ; OUTPUT_DATA_BLOCK
288 120h |                         | ;
288 120h |                         | ; Description:
288 120h |                         | ;
288 120h |                         | ;   The output function, which dumps 64 bytes of data out through the column
288 120h |                         | ;   data bus.  This can be called with different starting addresses to determine
288 120h |                         | ;   whether X, Y, Z or some other block is output.
288 120h |                         | ;
288 120h |                         | ; Inputs:
288 120h |                         | ;
288 120h |                         | ;   r0          The address to begin outputing.  The last byte will be output
288 120h |                         | ;               from address r0+63.
288 120h |                         | ;
288 120h |                         | ; Outputs:
288 120h |                         | ;
288 120h |                         | ;   -           64 bytes for each NP on column data bus.
288 120h |                         | ;
288 120h |                         | ; Registers Modified:
288 120h |                         | ;
288 120h |                         | ;   r0, r1
288 120h |                         | ;-------------------------------------------------------------------------------
288 120h |                         | 
288 120h |                         | OUTPUT_DATA_BLOCK:
288 120h |                         | 
288 120h | 42D0h 0100001011010000b |     LDR     r1, r0          ; Calculate the final address.
289 121h | 0340h 0000001101000000b |     ADD     r1, NUM_PIXELS      
290 122h |                         | 
290 122h |                         | OUTPUT_DATA_BLOCK_LOOP:
290 122h |                         | 
290 122h | A0F0h 1010000011110000b |     OUT     [r0], 0          ; Row 0
291 123h | A2F0h 1010001011110000b |     OUT     [r0], 1          ; Row 1
292 124h | A4F0h 1010010011110000b |     OUT     [r0], 2          ; Row 2
293 125h | A6F0h 1010011011110000b |     OUT     [r0], 3          ; Row 3
294 126h | A8F0h 1010100011110000b |     OUT     [r0], 4          ; Row 4
295 127h | AAF0h 1010101011110000b |     OUT     [r0], 5          ; Row 5
296 128h | ACF0h 1010110011110000b |     OUT     [r0], 6          ; Row 6
297 129h | AEF0h 1010111011110000b |     OUT     [r0], 7          ; Row 7
298 12Ah |                         |     
298 12Ah | 0101h 0000000100000001b |     ADD     r0, 1
299 12Bh | 38D1h 0011100011010001b |     CMP     r0, r1
300 12Ch | D221h 1101001000100001b |     BNE     OUTPUT_DATA_BLOCK_LOOP
301 12Dh | 8210h 1000001000010000b |     BX 
